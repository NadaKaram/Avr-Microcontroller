
EXTI_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  000038ea  0000397e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080018c  0080018c  00003aaa  2**0
                  ALLOC
  3 .stab         00003864  00000000  00000000  00003aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001847  00000000  00000000  00007310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c67a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d850  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000da10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000dd06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__vector_1>
       8:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_2>
       c:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__vector_10>
      2c:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3a 1a 	call	0x3474	; 0x3474 <main>
      8a:	0c 94 73 1c 	jmp	0x38e6	; 0x38e6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <M_Timer0_void_setTime>:
#include <avr/interrupt.h>
static u32 NumberOFOverflows =0;
static u32 NumberOFRemainingTicks =0;

void M_Timer0_void_setTime(u32 copy_u32timeMS) // time in millisecond
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	a5 97       	sbiw	r28, 0x25	; 37
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	6d 8f       	std	Y+29, r22	; 0x1d
     e44:	7e 8f       	std	Y+30, r23	; 0x1e
     e46:	8f 8f       	std	Y+31, r24	; 0x1f
     e48:	98 a3       	std	Y+32, r25	; 0x20
	u32 Loc_prescalerArr[]={1,8,64,256,1024};
     e4a:	ce 01       	movw	r24, r28
     e4c:	09 96       	adiw	r24, 0x09	; 9
     e4e:	9a a3       	std	Y+34, r25	; 0x22
     e50:	89 a3       	std	Y+33, r24	; 0x21
     e52:	e8 e6       	ldi	r30, 0x68	; 104
     e54:	f1 e0       	ldi	r31, 0x01	; 1
     e56:	fc a3       	std	Y+36, r31	; 0x24
     e58:	eb a3       	std	Y+35, r30	; 0x23
     e5a:	f4 e1       	ldi	r31, 0x14	; 20
     e5c:	fd a3       	std	Y+37, r31	; 0x25
     e5e:	eb a1       	ldd	r30, Y+35	; 0x23
     e60:	fc a1       	ldd	r31, Y+36	; 0x24
     e62:	00 80       	ld	r0, Z
     e64:	8b a1       	ldd	r24, Y+35	; 0x23
     e66:	9c a1       	ldd	r25, Y+36	; 0x24
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	9c a3       	std	Y+36, r25	; 0x24
     e6c:	8b a3       	std	Y+35, r24	; 0x23
     e6e:	e9 a1       	ldd	r30, Y+33	; 0x21
     e70:	fa a1       	ldd	r31, Y+34	; 0x22
     e72:	00 82       	st	Z, r0
     e74:	89 a1       	ldd	r24, Y+33	; 0x21
     e76:	9a a1       	ldd	r25, Y+34	; 0x22
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	9a a3       	std	Y+34, r25	; 0x22
     e7c:	89 a3       	std	Y+33, r24	; 0x21
     e7e:	9d a1       	ldd	r25, Y+37	; 0x25
     e80:	91 50       	subi	r25, 0x01	; 1
     e82:	9d a3       	std	Y+37, r25	; 0x25
     e84:	ed a1       	ldd	r30, Y+37	; 0x25
     e86:	ee 23       	and	r30, r30
     e88:	51 f7       	brne	.-44     	; 0xe5e <M_Timer0_void_setTime+0x30>
	f32 Lock_TickTime = (f32)Loc_prescalerArr[TIMER0_PRESCALER-1]/ FCPU;
     e8a:	89 8d       	ldd	r24, Y+25	; 0x19
     e8c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e8e:	ab 8d       	ldd	r26, Y+27	; 0x1b
     e90:	bc 8d       	ldd	r27, Y+28	; 0x1c
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	bc 01       	movw	r22, r24
     ea0:	cd 01       	movw	r24, r26
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	51 e4       	ldi	r21, 0x41	; 65
     eaa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	8d 83       	std	Y+5, r24	; 0x05
     eb4:	9e 83       	std	Y+6, r25	; 0x06
     eb6:	af 83       	std	Y+7, r26	; 0x07
     eb8:	b8 87       	std	Y+8, r27	; 0x08
	u32 NoOFDesiredTicks =(copy_u32timeMS * 1000)/ Lock_TickTime;
     eba:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ebc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ebe:	af 8d       	ldd	r26, Y+31	; 0x1f
     ec0:	b8 a1       	ldd	r27, Y+32	; 0x20
     ec2:	28 ee       	ldi	r18, 0xE8	; 232
     ec4:	33 e0       	ldi	r19, 0x03	; 3
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	50 e0       	ldi	r21, 0x00	; 0
     eca:	bc 01       	movw	r22, r24
     ecc:	cd 01       	movw	r24, r26
     ece:	0e 94 ad 1b 	call	0x375a	; 0x375a <__mulsi3>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	bc 01       	movw	r22, r24
     ed8:	cd 01       	movw	r24, r26
     eda:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	2d 81       	ldd	r18, Y+5	; 0x05
     ee8:	3e 81       	ldd	r19, Y+6	; 0x06
     eea:	4f 81       	ldd	r20, Y+7	; 0x07
     eec:	58 85       	ldd	r21, Y+8	; 0x08
     eee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	bc 01       	movw	r22, r24
     ef8:	cd 01       	movw	r24, r26
     efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	ab 83       	std	Y+3, r26	; 0x03
     f08:	bc 83       	std	Y+4, r27	; 0x04
		NumberOFOverflows++;
	}
#elif(TIMER0_MODE == TIMER0_CTC_MODE)

#endif
}
     f0a:	a5 96       	adiw	r28, 0x25	; 37
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <M_TIMER0_void_Init>:
static void (* Arr_callBack[2])(void)={NULL ,NULL};
void M_TIMER0_void_Init(void)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
#elif(TIMER0_MODE == TIMER0_FAST_PWM_MODE)
	SET_BIT(TCCR0_REG,WGM00_BIT);
	SET_BIT(TCCR0_REG,WGM01_BIT);

#elif(TIMER0_MODE == TIMER0_PHASECORRECT_MODE)
	SET_BIT(TCCR0_REG,WGM00_BIT);
     f24:	a3 e5       	ldi	r26, 0x53	; 83
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e3 e5       	ldi	r30, 0x53	; 83
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 64       	ori	r24, 0x40	; 64
     f30:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM01_BIT);
     f32:	a3 e5       	ldi	r26, 0x53	; 83
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e3 e5       	ldi	r30, 0x53	; 83
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	87 7f       	andi	r24, 0xF7	; 247
     f3e:	8c 93       	st	X, r24
#endif

#if((TIMER0_OC0_MODE == TIMER0_PWM_NON_INVERTED) || (TIMER0_OC0_MODE == TIMER0_PWM_INVERTED))
	TCCR0_REG &= TIMER0_OC0_MASK;
     f40:	a3 e5       	ldi	r26, 0x53	; 83
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e3 e5       	ldi	r30, 0x53	; 83
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	8f 7c       	andi	r24, 0xCF	; 207
     f4c:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER0_OC0_MODE;
     f4e:	a3 e5       	ldi	r26, 0x53	; 83
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e3 e5       	ldi	r30, 0x53	; 83
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 62       	ori	r24, 0x20	; 32
     f5a:	8c 93       	st	X, r24
														SET_BIT(TCCR0_REG,WGM01_BIT);
													#else
														#error("WRONG TIMER MODE")
													#endif*/

}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <M_TIMER0_void_Start>:
void M_TIMER0_void_Start(void)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
#if(TIMER0_PRESCALER >= TIMER0_PRESCALER_NO_CLOCK && TIMER0_PRESCALER <= TIMER0_PRESCALER_EXTCLK_RAISING_EDGE)
	//step 1 : apply mask
	TCCR0_REG &= TIMER0_PRESCALER_MASK;
     f6a:	a3 e5       	ldi	r26, 0x53	; 83
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e3 e5       	ldi	r30, 0x53	; 83
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	88 7f       	andi	r24, 0xF8	; 248
     f76:	8c 93       	st	X, r24
	//step 2 : insert value
	TCCR0_REG  |= TIMER0_PRESCALER;
     f78:	a3 e5       	ldi	r26, 0x53	; 83
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e3 e5       	ldi	r30, 0x53	; 83
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	85 60       	ori	r24, 0x05	; 5
     f84:	8c 93       	st	X, r24

#endif
}
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <M_TIMER0_void_EnableInt>:
void M_TIMER0_void_EnableInt(u8 copy_u8IntID)
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	0f 92       	push	r0
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	 */

	//METHOD 2 --> SET PIN DIRECT
	SET_BIT(TIMSK_REG, copy_u8IntID);
     f98:	a9 e5       	ldi	r26, 0x59	; 89
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e9 e5       	ldi	r30, 0x59	; 89
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <M_TIMER0_void_EnableInt+0x2a>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <M_TIMER0_void_EnableInt+0x26>
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24


}
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <M_TIMER0_void_DidableInt>:
void M_TIMER0_void_DidableInt(u8 copy_u8IntID)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	0f 92       	push	r0
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	 */

	//METHOD 2 --> CLR PIN DIRECT
	CLR_BIT(TIMSK_REG, copy_u8IntID);
     fd2:	a9 e5       	ldi	r26, 0x59	; 89
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e9 e5       	ldi	r30, 0x59	; 89
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <M_TIMER0_void_DidableInt+0x2a>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <M_TIMER0_void_DidableInt+0x26>
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	8c 93       	st	X, r24

}
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <M_TIMER0_void_Stop>:

void M_TIMER0_void_Stop(void)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	//step 1 : apply mask
	TCCR0_REG &= TIMER0_PRESCALER_NO_CLOCK;
    100c:	e3 e5       	ldi	r30, 0x53	; 83
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	e3 e5       	ldi	r30, 0x53	; 83
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	10 82       	st	Z, r1
	//step 2: insert value
	//TCCR0_REG = TIMER0_PRESCALER;

}
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <M_TIMER0_void_setCallBack>:
void M_TIMER0_void_setCallBack(void (*ptrfn)(void), u8 copy_u8IntID){			//to call file mcal and we cant call two file in same layer
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	00 d0       	rcall	.+0      	; 0x1026 <M_TIMER0_void_setCallBack+0x6>
    1026:	00 d0       	rcall	.+0      	; 0x1028 <M_TIMER0_void_setCallBack+0x8>
    1028:	0f 92       	push	r0
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	9a 83       	std	Y+2, r25	; 0x02
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	6b 83       	std	Y+3, r22	; 0x03
	//method 1
	switch(copy_u8IntID)
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	3d 83       	std	Y+5, r19	; 0x05
    103c:	2c 83       	std	Y+4, r18	; 0x04
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	31 f0       	breq	.+12     	; 0x1052 <M_TIMER0_void_setCallBack+0x32>
    1046:	2c 81       	ldd	r18, Y+4	; 0x04
    1048:	3d 81       	ldd	r19, Y+5	; 0x05
    104a:	21 30       	cpi	r18, 0x01	; 1
    104c:	31 05       	cpc	r19, r1
    104e:	41 f0       	breq	.+16     	; 0x1060 <M_TIMER0_void_setCallBack+0x40>
    1050:	0d c0       	rjmp	.+26     	; 0x106c <M_TIMER0_void_setCallBack+0x4c>
	{
	case TIMER0_OVF_INT_ID:
		Arr_callBack[0]=ptrfn;
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	90 93 95 01 	sts	0x0195, r25
    105a:	80 93 94 01 	sts	0x0194, r24
    105e:	06 c0       	rjmp	.+12     	; 0x106c <M_TIMER0_void_setCallBack+0x4c>
		break;
	case TIMER0_CMP_INT_ID:
		Arr_callBack[1]=ptrfn;
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	9a 81       	ldd	r25, Y+2	; 0x02
    1064:	90 93 97 01 	sts	0x0197, r25
    1068:	80 93 96 01 	sts	0x0196, r24
		break;
		//method 2  access with array
		Arr_callBack[copy_u8IntID]=ptrfn;

	}
}
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	0f 92       	push	r0
    1084:	11 24       	eor	r1, r1
    1086:	2f 93       	push	r18
    1088:	3f 93       	push	r19
    108a:	4f 93       	push	r20
    108c:	5f 93       	push	r21
    108e:	6f 93       	push	r22
    1090:	7f 93       	push	r23
    1092:	8f 93       	push	r24
    1094:	9f 93       	push	r25
    1096:	af 93       	push	r26
    1098:	bf 93       	push	r27
    109a:	ef 93       	push	r30
    109c:	ff 93       	push	r31
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	static  u32 Loc_OVFCounter =0;
	Loc_OVFCounter++;
    10a6:	80 91 98 01 	lds	r24, 0x0198
    10aa:	90 91 99 01 	lds	r25, 0x0199
    10ae:	a0 91 9a 01 	lds	r26, 0x019A
    10b2:	b0 91 9b 01 	lds	r27, 0x019B
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	a1 1d       	adc	r26, r1
    10ba:	b1 1d       	adc	r27, r1
    10bc:	80 93 98 01 	sts	0x0198, r24
    10c0:	90 93 99 01 	sts	0x0199, r25
    10c4:	a0 93 9a 01 	sts	0x019A, r26
    10c8:	b0 93 9b 01 	sts	0x019B, r27
	if(Loc_OVFCounter ==NumberOFOverflows)
    10cc:	20 91 98 01 	lds	r18, 0x0198
    10d0:	30 91 99 01 	lds	r19, 0x0199
    10d4:	40 91 9a 01 	lds	r20, 0x019A
    10d8:	50 91 9b 01 	lds	r21, 0x019B
    10dc:	80 91 8c 01 	lds	r24, 0x018C
    10e0:	90 91 8d 01 	lds	r25, 0x018D
    10e4:	a0 91 8e 01 	lds	r26, 0x018E
    10e8:	b0 91 8f 01 	lds	r27, 0x018F
    10ec:	28 17       	cp	r18, r24
    10ee:	39 07       	cpc	r19, r25
    10f0:	4a 07       	cpc	r20, r26
    10f2:	5b 07       	cpc	r21, r27
    10f4:	59 f4       	brne	.+22     	; 0x110c <__vector_11+0x90>
	{
		if(Arr_callBack[TIMER0_OVF_INT_ID] != NULL)
    10f6:	80 91 94 01 	lds	r24, 0x0194
    10fa:	90 91 95 01 	lds	r25, 0x0195
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	29 f0       	breq	.+10     	; 0x110c <__vector_11+0x90>
		{
			Arr_callBack[TIMER0_OVF_INT_ID]();
    1102:	e0 91 94 01 	lds	r30, 0x0194
    1106:	f0 91 95 01 	lds	r31, 0x0195
    110a:	09 95       	icall
		}
	}
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	bf 91       	pop	r27
    1116:	af 91       	pop	r26
    1118:	9f 91       	pop	r25
    111a:	8f 91       	pop	r24
    111c:	7f 91       	pop	r23
    111e:	6f 91       	pop	r22
    1120:	5f 91       	pop	r21
    1122:	4f 91       	pop	r20
    1124:	3f 91       	pop	r19
    1126:	2f 91       	pop	r18
    1128:	0f 90       	pop	r0
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	0f 90       	pop	r0
    112e:	1f 90       	pop	r1
    1130:	18 95       	reti

00001132 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1132:	1f 92       	push	r1
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	0f 92       	push	r0
    113a:	11 24       	eor	r1, r1
    113c:	2f 93       	push	r18
    113e:	3f 93       	push	r19
    1140:	4f 93       	push	r20
    1142:	5f 93       	push	r21
    1144:	6f 93       	push	r22
    1146:	7f 93       	push	r23
    1148:	8f 93       	push	r24
    114a:	9f 93       	push	r25
    114c:	af 93       	push	r26
    114e:	bf 93       	push	r27
    1150:	ef 93       	push	r30
    1152:	ff 93       	push	r31
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
	if(Arr_callBack[TIMER0_CMP_INT_ID]!=NULL)
    115c:	80 91 96 01 	lds	r24, 0x0196
    1160:	90 91 97 01 	lds	r25, 0x0197
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	29 f0       	breq	.+10     	; 0x1172 <__vector_10+0x40>
	{
		Arr_callBack[TIMER0_CMP_INT_ID]();
    1168:	e0 91 96 01 	lds	r30, 0x0196
    116c:	f0 91 97 01 	lds	r31, 0x0197
    1170:	09 95       	icall
	}


}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	ff 91       	pop	r31
    1178:	ef 91       	pop	r30
    117a:	bf 91       	pop	r27
    117c:	af 91       	pop	r26
    117e:	9f 91       	pop	r25
    1180:	8f 91       	pop	r24
    1182:	7f 91       	pop	r23
    1184:	6f 91       	pop	r22
    1186:	5f 91       	pop	r21
    1188:	4f 91       	pop	r20
    118a:	3f 91       	pop	r19
    118c:	2f 91       	pop	r18
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <M_TIMER0_void_setphaseCorrectPWM>:
void M_TIMER0_void_setphaseCorrectPWM(u8 copy_u8Duty)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <M_TIMER0_void_setphaseCorrectPWM+0x6>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <M_TIMER0_void_setphaseCorrectPWM+0x8>
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	89 83       	std	Y+1, r24	; 0x01
#if(TIMER0_MODE == TIMER0_PHASECORRECT_MODE)
  #if(TIMER0_OC0_MODE == TIMER0_PWM_NON_INVERTED)
	OCR0_REG = abs(((copy_u8Duty*255)/100));
    11a8:	8c e5       	ldi	r24, 0x5C	; 92
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	9d 83       	std	Y+5, r25	; 0x05
    11ae:	8c 83       	std	Y+4, r24	; 0x04
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	48 2f       	mov	r20, r24
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	ca 01       	movw	r24, r20
    11b8:	9c 01       	movw	r18, r24
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	c9 01       	movw	r24, r18
    11c0:	96 95       	lsr	r25
    11c2:	98 2f       	mov	r25, r24
    11c4:	88 27       	eor	r24, r24
    11c6:	97 95       	ror	r25
    11c8:	87 95       	ror	r24
    11ca:	82 1b       	sub	r24, r18
    11cc:	93 0b       	sbc	r25, r19
    11ce:	84 0f       	add	r24, r20
    11d0:	95 1f       	adc	r25, r21
    11d2:	24 e6       	ldi	r18, 0x64	; 100
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	b9 01       	movw	r22, r18
    11d8:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <__divmodhi4>
    11dc:	cb 01       	movw	r24, r22
    11de:	9b 83       	std	Y+3, r25	; 0x03
    11e0:	8a 83       	std	Y+2, r24	; 0x02
    11e2:	ea 81       	ldd	r30, Y+2	; 0x02
    11e4:	fb 81       	ldd	r31, Y+3	; 0x03
    11e6:	ff 23       	and	r31, r31
    11e8:	3c f4       	brge	.+14     	; 0x11f8 <M_TIMER0_void_setphaseCorrectPWM+0x60>
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	9b 81       	ldd	r25, Y+3	; 0x03
    11ee:	90 95       	com	r25
    11f0:	81 95       	neg	r24
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	9b 83       	std	Y+3, r25	; 0x03
    11f6:	8a 83       	std	Y+2, r24	; 0x02
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	ec 81       	ldd	r30, Y+4	; 0x04
    11fc:	fd 81       	ldd	r31, Y+5	; 0x05
    11fe:	80 83       	st	Z, r24
	OCR0_REG= 255 -((copy_u8Duty*255)/100);

  #endif
#endif

}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <M_TIMER0_void_setFastPWM>:

void M_TIMER0_void_setFastPWM(u8 copy_u8Duty)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	0f 92       	push	r0
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG= 255 -((copy_u8Duty*256)/100);
     #else
        #error ("wrong OC0 MODE")
#endif
#endif
}
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <M_GIE_void_enable>:
#include "GIE_priv.h"
#include "GIE_config.h"


void M_GIE_void_enable(void)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
	//Method 1
	//SET_BIT(SREG_REG,I_BIT)
	asm("SEI");
    122c:	78 94       	sei

}
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <M_GIE_void_disable>:
void M_GIE_void_disable(void)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
	//Method 1:
	//CLR_BIT(SREG_REG,I_BIT)
	//Method 2:
	asm("CLI");
    123c:	f8 94       	cli
}
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <M_EXTI_void_enable>:
#include "EXTI_priv.h"
#include "EXTI_config.h"
static
void(*Arr_CallBack[3])(void)={NULL,NULL,NULL};
void M_EXTI_void_enable(u8 copy_u8IntID, u8 copy_u8Sense)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <M_EXTI_void_enable+0x6>
    124a:	00 d0       	rcall	.+0      	; 0x124c <M_EXTI_void_enable+0x8>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8Sense >= 0 && copy_u8Sense<=3)
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	84 30       	cpi	r24, 0x04	; 4
    1258:	08 f0       	brcs	.+2      	; 0x125c <M_EXTI_void_enable+0x18>
    125a:	6b c0       	rjmp	.+214    	; 0x1332 <M_EXTI_void_enable+0xee>
	{
		// step 1: config sense
		switch(copy_u8IntID)
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	3c 83       	std	Y+4, r19	; 0x04
    1264:	2b 83       	std	Y+3, r18	; 0x03
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	86 30       	cpi	r24, 0x06	; 6
    126c:	91 05       	cpc	r25, r1
    126e:	59 f0       	breq	.+22     	; 0x1286 <M_EXTI_void_enable+0x42>
    1270:	2b 81       	ldd	r18, Y+3	; 0x03
    1272:	3c 81       	ldd	r19, Y+4	; 0x04
    1274:	27 30       	cpi	r18, 0x07	; 7
    1276:	31 05       	cpc	r19, r1
    1278:	b1 f0       	breq	.+44     	; 0x12a6 <M_EXTI_void_enable+0x62>
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	85 30       	cpi	r24, 0x05	; 5
    1280:	91 05       	cpc	r25, r1
    1282:	41 f1       	breq	.+80     	; 0x12d4 <M_EXTI_void_enable+0x90>
    1284:	3d c0       	rjmp	.+122    	; 0x1300 <M_EXTI_void_enable+0xbc>
		{
		case EXTI_INT0_ID:
			MCUCR_REG &= EXTI_INT0_TRIG_MASK;
    1286:	a5 e5       	ldi	r26, 0x55	; 85
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e5       	ldi	r30, 0x55	; 85
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8c 7f       	andi	r24, 0xFC	; 252
    1292:	8c 93       	st	X, r24
			MCUCSR_REG |= copy_u8Sense;
    1294:	a4 e5       	ldi	r26, 0x54	; 84
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e4 e5       	ldi	r30, 0x54	; 84
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	90 81       	ld	r25, Z
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	89 2b       	or	r24, r25
    12a2:	8c 93       	st	X, r24
    12a4:	2d c0       	rjmp	.+90     	; 0x1300 <M_EXTI_void_enable+0xbc>
			break;
		case EXTI_INT1_ID:
			MCUCR_REG &= EXTI_INT1_TRIG_MASK;
    12a6:	a5 e5       	ldi	r26, 0x55	; 85
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e5 e5       	ldi	r30, 0x55	; 85
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	83 7f       	andi	r24, 0xF3	; 243
    12b2:	8c 93       	st	X, r24
			MCUCSR_REG |= copy_u8Sense<<EXTI_INT1_TRIG_SHIFT;
    12b4:	a4 e5       	ldi	r26, 0x54	; 84
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e4 e5       	ldi	r30, 0x54	; 84
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	28 2f       	mov	r18, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	82 2b       	or	r24, r18
    12d0:	8c 93       	st	X, r24
    12d2:	16 c0       	rjmp	.+44     	; 0x1300 <M_EXTI_void_enable+0xbc>
			break;
		case EXTI_INT2_ID:
			// CLR_BIT(MCUCSR_REG, ,ISC2_BIT);
			MCUCSR_REG |= (GET_BIT(copy_u8Sense,0))<<EXTI_INT2_TRIG_SHIFT;
    12d4:	a4 e5       	ldi	r26, 0x54	; 84
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e4 e5       	ldi	r30, 0x54	; 84
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	28 2f       	mov	r18, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	81 70       	andi	r24, 0x01	; 1
    12e8:	90 70       	andi	r25, 0x00	; 0
    12ea:	00 24       	eor	r0, r0
    12ec:	96 95       	lsr	r25
    12ee:	87 95       	ror	r24
    12f0:	07 94       	ror	r0
    12f2:	96 95       	lsr	r25
    12f4:	87 95       	ror	r24
    12f6:	07 94       	ror	r0
    12f8:	98 2f       	mov	r25, r24
    12fa:	80 2d       	mov	r24, r0
    12fc:	82 2b       	or	r24, r18
    12fe:	8c 93       	st	X, r24
			break;
		}
		//step 2: enable PIE
		if(copy_u8IntID>= INT2_BIT && copy_u8IntID<= INT1_BIT)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	85 30       	cpi	r24, 0x05	; 5
    1304:	b0 f0       	brcs	.+44     	; 0x1332 <M_EXTI_void_enable+0xee>
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	88 30       	cpi	r24, 0x08	; 8
    130a:	98 f4       	brcc	.+38     	; 0x1332 <M_EXTI_void_enable+0xee>
		{
			SET_BIT(GICR_REG,copy_u8IntID);
    130c:	ab e5       	ldi	r26, 0x5B	; 91
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	eb e5       	ldi	r30, 0x5B	; 91
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <M_EXTI_void_enable+0xe6>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <M_EXTI_void_enable+0xe2>
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
		}
	}
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <M_EXTI_void_disable>:
void M_EXTI_void_disable(u8 copy_u8IntID)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	0f 92       	push	r0
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	//method 2
	//if(copy_u8IntID>=EXTI_INT0_ID && copy_u8IntID<=EXTI_INT2_ID)
	// CLR_BIT(GICR_REG,copy_u8IntID);
}
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <M_EXTI_void_setCallBack>:
void M_EXTI_void_setCallBack(void (*ptrfn)(void),u8 copy_u8IntID)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <M_EXTI_void_setCallBack+0x6>
    135a:	00 d0       	rcall	.+0      	; 0x135c <M_EXTI_void_setCallBack+0x8>
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	6b 83       	std	Y+3, r22	; 0x03
	switch(copy_u8IntID)
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3d 83       	std	Y+5, r19	; 0x05
    1370:	2c 83       	std	Y+4, r18	; 0x04
    1372:	8c 81       	ldd	r24, Y+4	; 0x04
    1374:	9d 81       	ldd	r25, Y+5	; 0x05
    1376:	86 30       	cpi	r24, 0x06	; 6
    1378:	91 05       	cpc	r25, r1
    137a:	59 f0       	breq	.+22     	; 0x1392 <M_EXTI_void_setCallBack+0x3e>
    137c:	2c 81       	ldd	r18, Y+4	; 0x04
    137e:	3d 81       	ldd	r19, Y+5	; 0x05
    1380:	27 30       	cpi	r18, 0x07	; 7
    1382:	31 05       	cpc	r19, r1
    1384:	69 f0       	breq	.+26     	; 0x13a0 <M_EXTI_void_setCallBack+0x4c>
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	9d 81       	ldd	r25, Y+5	; 0x05
    138a:	85 30       	cpi	r24, 0x05	; 5
    138c:	91 05       	cpc	r25, r1
    138e:	79 f0       	breq	.+30     	; 0x13ae <M_EXTI_void_setCallBack+0x5a>
    1390:	14 c0       	rjmp	.+40     	; 0x13ba <M_EXTI_void_setCallBack+0x66>
	{
	case EXTI_INT0_ID:
		Arr_CallBack[0]=ptrfn;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	90 93 9d 01 	sts	0x019D, r25
    139a:	80 93 9c 01 	sts	0x019C, r24
    139e:	0d c0       	rjmp	.+26     	; 0x13ba <M_EXTI_void_setCallBack+0x66>
		break;
	case EXTI_INT1_ID:
		Arr_CallBack[1]=ptrfn;
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	9a 81       	ldd	r25, Y+2	; 0x02
    13a4:	90 93 9f 01 	sts	0x019F, r25
    13a8:	80 93 9e 01 	sts	0x019E, r24
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <M_EXTI_void_setCallBack+0x66>
		break;
	case EXTI_INT2_ID:
		Arr_CallBack[2]=ptrfn;
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	90 93 a1 01 	sts	0x01A1, r25
    13b6:	80 93 a0 01 	sts	0x01A0, r24
		break;
	}
}
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <__vector_1>:
ISR(INT0_vect)
{
    13ca:	1f 92       	push	r1
    13cc:	0f 92       	push	r0
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	0f 92       	push	r0
    13d2:	11 24       	eor	r1, r1
    13d4:	2f 93       	push	r18
    13d6:	3f 93       	push	r19
    13d8:	4f 93       	push	r20
    13da:	5f 93       	push	r21
    13dc:	6f 93       	push	r22
    13de:	7f 93       	push	r23
    13e0:	8f 93       	push	r24
    13e2:	9f 93       	push	r25
    13e4:	af 93       	push	r26
    13e6:	bf 93       	push	r27
    13e8:	ef 93       	push	r30
    13ea:	ff 93       	push	r31
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[0] != NULL)
    13f4:	80 91 9c 01 	lds	r24, 0x019C
    13f8:	90 91 9d 01 	lds	r25, 0x019D
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	29 f0       	breq	.+10     	; 0x140a <__vector_1+0x40>
	{
		Arr_CallBack[0]();
    1400:	e0 91 9c 01 	lds	r30, 0x019C
    1404:	f0 91 9d 01 	lds	r31, 0x019D
    1408:	09 95       	icall
	}
}
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	ff 91       	pop	r31
    1410:	ef 91       	pop	r30
    1412:	bf 91       	pop	r27
    1414:	af 91       	pop	r26
    1416:	9f 91       	pop	r25
    1418:	8f 91       	pop	r24
    141a:	7f 91       	pop	r23
    141c:	6f 91       	pop	r22
    141e:	5f 91       	pop	r21
    1420:	4f 91       	pop	r20
    1422:	3f 91       	pop	r19
    1424:	2f 91       	pop	r18
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	0f 90       	pop	r0
    142c:	1f 90       	pop	r1
    142e:	18 95       	reti

00001430 <__vector_2>:
ISR(INT1_vect)
{
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[1] != NULL)
    145a:	80 91 9e 01 	lds	r24, 0x019E
    145e:	90 91 9f 01 	lds	r25, 0x019F
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	29 f0       	breq	.+10     	; 0x1470 <__vector_2+0x40>
	{
		Arr_CallBack[1]();
    1466:	e0 91 9e 01 	lds	r30, 0x019E
    146a:	f0 91 9f 01 	lds	r31, 0x019F
    146e:	09 95       	icall
	}
}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	ff 91       	pop	r31
    1476:	ef 91       	pop	r30
    1478:	bf 91       	pop	r27
    147a:	af 91       	pop	r26
    147c:	9f 91       	pop	r25
    147e:	8f 91       	pop	r24
    1480:	7f 91       	pop	r23
    1482:	6f 91       	pop	r22
    1484:	5f 91       	pop	r21
    1486:	4f 91       	pop	r20
    1488:	3f 91       	pop	r19
    148a:	2f 91       	pop	r18
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	0f 90       	pop	r0
    1492:	1f 90       	pop	r1
    1494:	18 95       	reti

00001496 <__vector_3>:
ISR(INT2_vect)
{
    1496:	1f 92       	push	r1
    1498:	0f 92       	push	r0
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	0f 92       	push	r0
    149e:	11 24       	eor	r1, r1
    14a0:	2f 93       	push	r18
    14a2:	3f 93       	push	r19
    14a4:	4f 93       	push	r20
    14a6:	5f 93       	push	r21
    14a8:	6f 93       	push	r22
    14aa:	7f 93       	push	r23
    14ac:	8f 93       	push	r24
    14ae:	9f 93       	push	r25
    14b0:	af 93       	push	r26
    14b2:	bf 93       	push	r27
    14b4:	ef 93       	push	r30
    14b6:	ff 93       	push	r31
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[2] != NULL)
    14c0:	80 91 a0 01 	lds	r24, 0x01A0
    14c4:	90 91 a1 01 	lds	r25, 0x01A1
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	29 f0       	breq	.+10     	; 0x14d6 <__vector_3+0x40>
	{
		Arr_CallBack[2]();
    14cc:	e0 91 a0 01 	lds	r30, 0x01A0
    14d0:	f0 91 a1 01 	lds	r31, 0x01A1
    14d4:	09 95       	icall
	}
}
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	ff 91       	pop	r31
    14dc:	ef 91       	pop	r30
    14de:	bf 91       	pop	r27
    14e0:	af 91       	pop	r26
    14e2:	9f 91       	pop	r25
    14e4:	8f 91       	pop	r24
    14e6:	7f 91       	pop	r23
    14e8:	6f 91       	pop	r22
    14ea:	5f 91       	pop	r21
    14ec:	4f 91       	pop	r20
    14ee:	3f 91       	pop	r19
    14f0:	2f 91       	pop	r18
    14f2:	0f 90       	pop	r0
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	0f 90       	pop	r0
    14f8:	1f 90       	pop	r1
    14fa:	18 95       	reti

000014fc <M_Dio_void_setPinDir>:
#include"../../LIB/std_types2.h"
#include "../../LIB/BIT_MATH.h"
#include "Dio_priv.h"
#include "Dio_int.h"
void M_Dio_void_setPinDir(u8 PortNumber,u8 PinNumber,u8 Direction)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	27 97       	sbiw	r28, 0x07	; 7
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	6a 83       	std	Y+2, r22	; 0x02
    1514:	4b 83       	std	Y+3, r20	; 0x03
	if(Direction == LOW)
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	88 23       	and	r24, r24
    151a:	09 f0       	breq	.+2      	; 0x151e <M_Dio_void_setPinDir+0x22>
    151c:	75 c0       	rjmp	.+234    	; 0x1608 <M_Dio_void_setPinDir+0x10c>
		{
			switch(PortNumber)
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	3f 83       	std	Y+7, r19	; 0x07
    1526:	2e 83       	std	Y+6, r18	; 0x06
    1528:	8e 81       	ldd	r24, Y+6	; 0x06
    152a:	9f 81       	ldd	r25, Y+7	; 0x07
    152c:	82 30       	cpi	r24, 0x02	; 2
    152e:	91 05       	cpc	r25, r1
    1530:	61 f1       	breq	.+88     	; 0x158a <M_Dio_void_setPinDir+0x8e>
    1532:	2e 81       	ldd	r18, Y+6	; 0x06
    1534:	3f 81       	ldd	r19, Y+7	; 0x07
    1536:	23 30       	cpi	r18, 0x03	; 3
    1538:	31 05       	cpc	r19, r1
    153a:	34 f4       	brge	.+12     	; 0x1548 <M_Dio_void_setPinDir+0x4c>
    153c:	8e 81       	ldd	r24, Y+6	; 0x06
    153e:	9f 81       	ldd	r25, Y+7	; 0x07
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	91 05       	cpc	r25, r1
    1544:	69 f0       	breq	.+26     	; 0x1560 <M_Dio_void_setPinDir+0x64>
    1546:	d3 c0       	rjmp	.+422    	; 0x16ee <M_Dio_void_setPinDir+0x1f2>
    1548:	2e 81       	ldd	r18, Y+6	; 0x06
    154a:	3f 81       	ldd	r19, Y+7	; 0x07
    154c:	23 30       	cpi	r18, 0x03	; 3
    154e:	31 05       	cpc	r19, r1
    1550:	89 f1       	breq	.+98     	; 0x15b4 <M_Dio_void_setPinDir+0xb8>
    1552:	8e 81       	ldd	r24, Y+6	; 0x06
    1554:	9f 81       	ldd	r25, Y+7	; 0x07
    1556:	84 30       	cpi	r24, 0x04	; 4
    1558:	91 05       	cpc	r25, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <M_Dio_void_setPinDir+0x62>
    155c:	40 c0       	rjmp	.+128    	; 0x15de <M_Dio_void_setPinDir+0xe2>
    155e:	c7 c0       	rjmp	.+398    	; 0x16ee <M_Dio_void_setPinDir+0x1f2>
			{
			case PORTA_ID:
				DDRA &=~(1<<PinNumber);
    1560:	aa e3       	ldi	r26, 0x3A	; 58
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ea e3       	ldi	r30, 0x3A	; 58
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 2e       	mov	r0, r18
    1578:	02 c0       	rjmp	.+4      	; 0x157e <M_Dio_void_setPinDir+0x82>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	0a 94       	dec	r0
    1580:	e2 f7       	brpl	.-8      	; 0x157a <M_Dio_void_setPinDir+0x7e>
    1582:	80 95       	com	r24
    1584:	84 23       	and	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	b2 c0       	rjmp	.+356    	; 0x16ee <M_Dio_void_setPinDir+0x1f2>
				break;
			case PORTB_ID:
				DDRB &=~(1<<PinNumber);
    158a:	a7 e3       	ldi	r26, 0x37	; 55
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e7 e3       	ldi	r30, 0x37	; 55
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <M_Dio_void_setPinDir+0xac>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <M_Dio_void_setPinDir+0xa8>
    15ac:	80 95       	com	r24
    15ae:	84 23       	and	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	9d c0       	rjmp	.+314    	; 0x16ee <M_Dio_void_setPinDir+0x1f2>
				break;
			case PORTC_ID:
				DDRC &=~(1<<PinNumber);
    15b4:	a4 e3       	ldi	r26, 0x34	; 52
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e4 e3       	ldi	r30, 0x34	; 52
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <M_Dio_void_setPinDir+0xd6>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <M_Dio_void_setPinDir+0xd2>
    15d6:	80 95       	com	r24
    15d8:	84 23       	and	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	88 c0       	rjmp	.+272    	; 0x16ee <M_Dio_void_setPinDir+0x1f2>
				break;
			case PORTD_ID:
				DDRD &=~(1<<PinNumber);
    15de:	a1 e3       	ldi	r26, 0x31	; 49
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e1 e3       	ldi	r30, 0x31	; 49
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <M_Dio_void_setPinDir+0x100>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <M_Dio_void_setPinDir+0xfc>
    1600:	80 95       	com	r24
    1602:	84 23       	and	r24, r20
    1604:	8c 93       	st	X, r24
    1606:	73 c0       	rjmp	.+230    	; 0x16ee <M_Dio_void_setPinDir+0x1f2>
				break;
			}
		}
		else if(Direction == HIGH)
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	09 f0       	breq	.+2      	; 0x1610 <M_Dio_void_setPinDir+0x114>
    160e:	6f c0       	rjmp	.+222    	; 0x16ee <M_Dio_void_setPinDir+0x1f2>
		{
			switch(PortNumber)
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	3d 83       	std	Y+5, r19	; 0x05
    1618:	2c 83       	std	Y+4, r18	; 0x04
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
    161c:	9d 81       	ldd	r25, Y+5	; 0x05
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	91 05       	cpc	r25, r1
    1622:	51 f1       	breq	.+84     	; 0x1678 <M_Dio_void_setPinDir+0x17c>
    1624:	2c 81       	ldd	r18, Y+4	; 0x04
    1626:	3d 81       	ldd	r19, Y+5	; 0x05
    1628:	23 30       	cpi	r18, 0x03	; 3
    162a:	31 05       	cpc	r19, r1
    162c:	34 f4       	brge	.+12     	; 0x163a <M_Dio_void_setPinDir+0x13e>
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	9d 81       	ldd	r25, Y+5	; 0x05
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	91 05       	cpc	r25, r1
    1636:	61 f0       	breq	.+24     	; 0x1650 <M_Dio_void_setPinDir+0x154>
    1638:	5a c0       	rjmp	.+180    	; 0x16ee <M_Dio_void_setPinDir+0x1f2>
    163a:	2c 81       	ldd	r18, Y+4	; 0x04
    163c:	3d 81       	ldd	r19, Y+5	; 0x05
    163e:	23 30       	cpi	r18, 0x03	; 3
    1640:	31 05       	cpc	r19, r1
    1642:	71 f1       	breq	.+92     	; 0x16a0 <M_Dio_void_setPinDir+0x1a4>
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	9d 81       	ldd	r25, Y+5	; 0x05
    1648:	84 30       	cpi	r24, 0x04	; 4
    164a:	91 05       	cpc	r25, r1
    164c:	e9 f1       	breq	.+122    	; 0x16c8 <M_Dio_void_setPinDir+0x1cc>
    164e:	4f c0       	rjmp	.+158    	; 0x16ee <M_Dio_void_setPinDir+0x1f2>
			{
			case PORTA_ID:
				DDRA |=(1<<PinNumber);
    1650:	aa e3       	ldi	r26, 0x3A	; 58
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	ea e3       	ldi	r30, 0x3A	; 58
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <M_Dio_void_setPinDir+0x172>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <M_Dio_void_setPinDir+0x16e>
    1672:	84 2b       	or	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	3b c0       	rjmp	.+118    	; 0x16ee <M_Dio_void_setPinDir+0x1f2>
				break;
			case PORTB_ID:
				DDRB |=(1<<PinNumber);
    1678:	a7 e3       	ldi	r26, 0x37	; 55
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e7 e3       	ldi	r30, 0x37	; 55
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <M_Dio_void_setPinDir+0x19a>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <M_Dio_void_setPinDir+0x196>
    169a:	84 2b       	or	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	27 c0       	rjmp	.+78     	; 0x16ee <M_Dio_void_setPinDir+0x1f2>
				break;
			case PORTC_ID:
				DDRC |=(1<<PinNumber);
    16a0:	a4 e3       	ldi	r26, 0x34	; 52
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e4 e3       	ldi	r30, 0x34	; 52
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <M_Dio_void_setPinDir+0x1c2>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <M_Dio_void_setPinDir+0x1be>
    16c2:	84 2b       	or	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	13 c0       	rjmp	.+38     	; 0x16ee <M_Dio_void_setPinDir+0x1f2>
				break;
			case PORTD_ID:
				DDRD |=(1<<PinNumber);
    16c8:	a1 e3       	ldi	r26, 0x31	; 49
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e1 e3       	ldi	r30, 0x31	; 49
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <M_Dio_void_setPinDir+0x1ea>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <M_Dio_void_setPinDir+0x1e6>
    16ea:	84 2b       	or	r24, r20
    16ec:	8c 93       	st	X, r24
				break;
			}
		}
}
    16ee:	27 96       	adiw	r28, 0x07	; 7
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <M_Dio_void_setPinValue>:
void M_Dio_void_setPinValue(u8 port,u8 PinNumber,u8 value)
{
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	00 d0       	rcall	.+0      	; 0x1706 <M_Dio_void_setPinValue+0x6>
    1706:	00 d0       	rcall	.+0      	; 0x1708 <M_Dio_void_setPinValue+0x8>
    1708:	0f 92       	push	r0
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	6a 83       	std	Y+2, r22	; 0x02
    1712:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	3d 83       	std	Y+5, r19	; 0x05
    171c:	2c 83       	std	Y+4, r18	; 0x04
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	82 30       	cpi	r24, 0x02	; 2
    1724:	91 05       	cpc	r25, r1
    1726:	09 f4       	brne	.+2      	; 0x172a <M_Dio_void_setPinValue+0x2a>
    1728:	48 c0       	rjmp	.+144    	; 0x17ba <M_Dio_void_setPinValue+0xba>
    172a:	2c 81       	ldd	r18, Y+4	; 0x04
    172c:	3d 81       	ldd	r19, Y+5	; 0x05
    172e:	23 30       	cpi	r18, 0x03	; 3
    1730:	31 05       	cpc	r19, r1
    1732:	34 f4       	brge	.+12     	; 0x1740 <M_Dio_void_setPinValue+0x40>
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	9d 81       	ldd	r25, Y+5	; 0x05
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	91 05       	cpc	r25, r1
    173c:	71 f0       	breq	.+28     	; 0x175a <M_Dio_void_setPinValue+0x5a>
    173e:	cb c0       	rjmp	.+406    	; 0x18d6 <M_Dio_void_setPinValue+0x1d6>
    1740:	2c 81       	ldd	r18, Y+4	; 0x04
    1742:	3d 81       	ldd	r19, Y+5	; 0x05
    1744:	23 30       	cpi	r18, 0x03	; 3
    1746:	31 05       	cpc	r19, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <M_Dio_void_setPinValue+0x4c>
    174a:	67 c0       	rjmp	.+206    	; 0x181a <M_Dio_void_setPinValue+0x11a>
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	84 30       	cpi	r24, 0x04	; 4
    1752:	91 05       	cpc	r25, r1
    1754:	09 f4       	brne	.+2      	; 0x1758 <M_Dio_void_setPinValue+0x58>
    1756:	91 c0       	rjmp	.+290    	; 0x187a <M_Dio_void_setPinValue+0x17a>
    1758:	be c0       	rjmp	.+380    	; 0x18d6 <M_Dio_void_setPinValue+0x1d6>
		{
		case PORTA_ID:
			if(value == HIGH)
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	a1 f4       	brne	.+40     	; 0x1788 <M_Dio_void_setPinValue+0x88>
				PORTA |=(1<<PinNumber);
    1760:	ab e3       	ldi	r26, 0x3B	; 59
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	eb e3       	ldi	r30, 0x3B	; 59
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <M_Dio_void_setPinValue+0x7e>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <M_Dio_void_setPinValue+0x7a>
    1782:	84 2b       	or	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	a7 c0       	rjmp	.+334    	; 0x18d6 <M_Dio_void_setPinValue+0x1d6>
			else if(value == LOW)
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	88 23       	and	r24, r24
    178c:	09 f0       	breq	.+2      	; 0x1790 <M_Dio_void_setPinValue+0x90>
    178e:	a3 c0       	rjmp	.+326    	; 0x18d6 <M_Dio_void_setPinValue+0x1d6>
				PORTA &=~(1<<PinNumber);
    1790:	ab e3       	ldi	r26, 0x3B	; 59
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	eb e3       	ldi	r30, 0x3B	; 59
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <M_Dio_void_setPinValue+0xae>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <M_Dio_void_setPinValue+0xaa>
    17b2:	80 95       	com	r24
    17b4:	84 23       	and	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	8e c0       	rjmp	.+284    	; 0x18d6 <M_Dio_void_setPinValue+0x1d6>
			break;
		case PORTB_ID:
			if(value == HIGH)
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	a1 f4       	brne	.+40     	; 0x17e8 <M_Dio_void_setPinValue+0xe8>
				PORTB |=(1<<PinNumber);
    17c0:	a8 e3       	ldi	r26, 0x38	; 56
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e8 e3       	ldi	r30, 0x38	; 56
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 2e       	mov	r0, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <M_Dio_void_setPinValue+0xde>
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	0a 94       	dec	r0
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <M_Dio_void_setPinValue+0xda>
    17e2:	84 2b       	or	r24, r20
    17e4:	8c 93       	st	X, r24
    17e6:	77 c0       	rjmp	.+238    	; 0x18d6 <M_Dio_void_setPinValue+0x1d6>
			else if(value== LOW)
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	88 23       	and	r24, r24
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <M_Dio_void_setPinValue+0xf0>
    17ee:	73 c0       	rjmp	.+230    	; 0x18d6 <M_Dio_void_setPinValue+0x1d6>
				PORTB &=~(1<<PinNumber);
    17f0:	a8 e3       	ldi	r26, 0x38	; 56
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e8 e3       	ldi	r30, 0x38	; 56
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <M_Dio_void_setPinValue+0x10e>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <M_Dio_void_setPinValue+0x10a>
    1812:	80 95       	com	r24
    1814:	84 23       	and	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	5e c0       	rjmp	.+188    	; 0x18d6 <M_Dio_void_setPinValue+0x1d6>
			break;
		case PORTC_ID:
			if(value == HIGH)
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	a1 f4       	brne	.+40     	; 0x1848 <M_Dio_void_setPinValue+0x148>
				PORTC |=(1<<PinNumber);
    1820:	a5 e3       	ldi	r26, 0x35	; 53
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e5 e3       	ldi	r30, 0x35	; 53
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <M_Dio_void_setPinValue+0x13e>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <M_Dio_void_setPinValue+0x13a>
    1842:	84 2b       	or	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	47 c0       	rjmp	.+142    	; 0x18d6 <M_Dio_void_setPinValue+0x1d6>
			else if(value== LOW)
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	88 23       	and	r24, r24
    184c:	09 f0       	breq	.+2      	; 0x1850 <M_Dio_void_setPinValue+0x150>
    184e:	43 c0       	rjmp	.+134    	; 0x18d6 <M_Dio_void_setPinValue+0x1d6>
				PORTC &=~(1<<PinNumber);
    1850:	a5 e3       	ldi	r26, 0x35	; 53
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e5 e3       	ldi	r30, 0x35	; 53
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <M_Dio_void_setPinValue+0x16e>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <M_Dio_void_setPinValue+0x16a>
    1872:	80 95       	com	r24
    1874:	84 23       	and	r24, r20
    1876:	8c 93       	st	X, r24
    1878:	2e c0       	rjmp	.+92     	; 0x18d6 <M_Dio_void_setPinValue+0x1d6>
			break;
		case PORTD_ID:
			if(value == HIGH)
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	a1 f4       	brne	.+40     	; 0x18a8 <M_Dio_void_setPinValue+0x1a8>
				PORTD |=(1<<PinNumber);
    1880:	a2 e3       	ldi	r26, 0x32	; 50
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e2 e3       	ldi	r30, 0x32	; 50
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <M_Dio_void_setPinValue+0x19e>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <M_Dio_void_setPinValue+0x19a>
    18a2:	84 2b       	or	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	17 c0       	rjmp	.+46     	; 0x18d6 <M_Dio_void_setPinValue+0x1d6>
			else if(value == LOW)
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	88 23       	and	r24, r24
    18ac:	a1 f4       	brne	.+40     	; 0x18d6 <M_Dio_void_setPinValue+0x1d6>
				PORTD &=~(1<<PinNumber);
    18ae:	a2 e3       	ldi	r26, 0x32	; 50
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e2 e3       	ldi	r30, 0x32	; 50
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <M_Dio_void_setPinValue+0x1cc>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <M_Dio_void_setPinValue+0x1c8>
    18d0:	80 95       	com	r24
    18d2:	84 23       	and	r24, r20
    18d4:	8c 93       	st	X, r24
			break;
		}
}
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <M_Dio_void_getPinValue>:
void M_Dio_void_getPinValue(u8 PortNumber,u8 PinNumber,u8 *value)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <M_Dio_void_getPinValue+0x6>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <M_Dio_void_getPinValue+0x8>
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <M_Dio_void_getPinValue+0xa>
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	6a 83       	std	Y+2, r22	; 0x02
    18f8:	5c 83       	std	Y+4, r21	; 0x04
    18fa:	4b 83       	std	Y+3, r20	; 0x03
	switch(PortNumber)
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	3e 83       	std	Y+6, r19	; 0x06
    1904:	2d 83       	std	Y+5, r18	; 0x05
    1906:	4d 81       	ldd	r20, Y+5	; 0x05
    1908:	5e 81       	ldd	r21, Y+6	; 0x06
    190a:	42 30       	cpi	r20, 0x02	; 2
    190c:	51 05       	cpc	r21, r1
    190e:	c1 f1       	breq	.+112    	; 0x1980 <M_Dio_void_getPinValue+0x9a>
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
    1914:	83 30       	cpi	r24, 0x03	; 3
    1916:	91 05       	cpc	r25, r1
    1918:	34 f4       	brge	.+12     	; 0x1926 <M_Dio_void_getPinValue+0x40>
    191a:	2d 81       	ldd	r18, Y+5	; 0x05
    191c:	3e 81       	ldd	r19, Y+6	; 0x06
    191e:	21 30       	cpi	r18, 0x01	; 1
    1920:	31 05       	cpc	r19, r1
    1922:	71 f0       	breq	.+28     	; 0x1940 <M_Dio_void_getPinValue+0x5a>
    1924:	8c c0       	rjmp	.+280    	; 0x1a3e <M_Dio_void_getPinValue+0x158>
    1926:	4d 81       	ldd	r20, Y+5	; 0x05
    1928:	5e 81       	ldd	r21, Y+6	; 0x06
    192a:	43 30       	cpi	r20, 0x03	; 3
    192c:	51 05       	cpc	r21, r1
    192e:	09 f4       	brne	.+2      	; 0x1932 <M_Dio_void_getPinValue+0x4c>
    1930:	47 c0       	rjmp	.+142    	; 0x19c0 <M_Dio_void_getPinValue+0xda>
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	9e 81       	ldd	r25, Y+6	; 0x06
    1936:	84 30       	cpi	r24, 0x04	; 4
    1938:	91 05       	cpc	r25, r1
    193a:	09 f4       	brne	.+2      	; 0x193e <M_Dio_void_getPinValue+0x58>
    193c:	61 c0       	rjmp	.+194    	; 0x1a00 <M_Dio_void_getPinValue+0x11a>
    193e:	7f c0       	rjmp	.+254    	; 0x1a3e <M_Dio_void_getPinValue+0x158>
		{
		case PORTA_ID:
			*value =(PINA & (1<<PinNumber))>>PinNumber;
    1940:	e9 e3       	ldi	r30, 0x39	; 57
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	48 2f       	mov	r20, r24
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 c0       	rjmp	.+4      	; 0x195a <M_Dio_void_getPinValue+0x74>
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	2a 95       	dec	r18
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <M_Dio_void_getPinValue+0x70>
    195e:	9a 01       	movw	r18, r20
    1960:	28 23       	and	r18, r24
    1962:	39 23       	and	r19, r25
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a9 01       	movw	r20, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <M_Dio_void_getPinValue+0x8c>
    196e:	55 95       	asr	r21
    1970:	47 95       	ror	r20
    1972:	8a 95       	dec	r24
    1974:	e2 f7       	brpl	.-8      	; 0x196e <M_Dio_void_getPinValue+0x88>
    1976:	ca 01       	movw	r24, r20
    1978:	eb 81       	ldd	r30, Y+3	; 0x03
    197a:	fc 81       	ldd	r31, Y+4	; 0x04
    197c:	80 83       	st	Z, r24
    197e:	5f c0       	rjmp	.+190    	; 0x1a3e <M_Dio_void_getPinValue+0x158>
			break;
		case PORTB_ID:
			*value =(PINB & (1<<PinNumber))>>PinNumber;
    1980:	e6 e3       	ldi	r30, 0x36	; 54
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	02 c0       	rjmp	.+4      	; 0x199a <M_Dio_void_getPinValue+0xb4>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	2a 95       	dec	r18
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <M_Dio_void_getPinValue+0xb0>
    199e:	9a 01       	movw	r18, r20
    19a0:	28 23       	and	r18, r24
    19a2:	39 23       	and	r19, r25
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	88 2f       	mov	r24, r24
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a9 01       	movw	r20, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <M_Dio_void_getPinValue+0xcc>
    19ae:	55 95       	asr	r21
    19b0:	47 95       	ror	r20
    19b2:	8a 95       	dec	r24
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <M_Dio_void_getPinValue+0xc8>
    19b6:	ca 01       	movw	r24, r20
    19b8:	eb 81       	ldd	r30, Y+3	; 0x03
    19ba:	fc 81       	ldd	r31, Y+4	; 0x04
    19bc:	80 83       	st	Z, r24
    19be:	3f c0       	rjmp	.+126    	; 0x1a3e <M_Dio_void_getPinValue+0x158>
			break;
		case PORTC_ID:
			*value =(PINC & (1<<PinNumber))>>PinNumber;
    19c0:	e3 e3       	ldi	r30, 0x33	; 51
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	48 2f       	mov	r20, r24
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <M_Dio_void_getPinValue+0xf4>
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	2a 95       	dec	r18
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <M_Dio_void_getPinValue+0xf0>
    19de:	9a 01       	movw	r18, r20
    19e0:	28 23       	and	r18, r24
    19e2:	39 23       	and	r19, r25
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a9 01       	movw	r20, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <M_Dio_void_getPinValue+0x10c>
    19ee:	55 95       	asr	r21
    19f0:	47 95       	ror	r20
    19f2:	8a 95       	dec	r24
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <M_Dio_void_getPinValue+0x108>
    19f6:	ca 01       	movw	r24, r20
    19f8:	eb 81       	ldd	r30, Y+3	; 0x03
    19fa:	fc 81       	ldd	r31, Y+4	; 0x04
    19fc:	80 83       	st	Z, r24
    19fe:	1f c0       	rjmp	.+62     	; 0x1a3e <M_Dio_void_getPinValue+0x158>
			break;
		case PORTD_ID:
			*value =(PIND & (1<<PinNumber))>>PinNumber;
    1a00:	e0 e3       	ldi	r30, 0x30	; 48
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <M_Dio_void_getPinValue+0x134>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	2a 95       	dec	r18
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <M_Dio_void_getPinValue+0x130>
    1a1e:	9a 01       	movw	r18, r20
    1a20:	28 23       	and	r18, r24
    1a22:	39 23       	and	r19, r25
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	a9 01       	movw	r20, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <M_Dio_void_getPinValue+0x14c>
    1a2e:	55 95       	asr	r21
    1a30:	47 95       	ror	r20
    1a32:	8a 95       	dec	r24
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <M_Dio_void_getPinValue+0x148>
    1a36:	ca 01       	movw	r24, r20
    1a38:	eb 81       	ldd	r30, Y+3	; 0x03
    1a3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a3c:	80 83       	st	Z, r24
			break;
		}
}
    1a3e:	26 96       	adiw	r28, 0x06	; 6
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <Dio_tog>:
void Dio_tog(u8 port,u8 pin)
{
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <Dio_tog+0x6>
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <Dio_tog+0x8>
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	3c 83       	std	Y+4, r19	; 0x04
    1a68:	2b 83       	std	Y+3, r18	; 0x03
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	82 30       	cpi	r24, 0x02	; 2
    1a70:	91 05       	cpc	r25, r1
    1a72:	51 f1       	breq	.+84     	; 0x1ac8 <Dio_tog+0x78>
    1a74:	2b 81       	ldd	r18, Y+3	; 0x03
    1a76:	3c 81       	ldd	r19, Y+4	; 0x04
    1a78:	23 30       	cpi	r18, 0x03	; 3
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	34 f4       	brge	.+12     	; 0x1a8a <Dio_tog+0x3a>
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	91 05       	cpc	r25, r1
    1a86:	61 f0       	breq	.+24     	; 0x1aa0 <Dio_tog+0x50>
    1a88:	5a c0       	rjmp	.+180    	; 0x1b3e <Dio_tog+0xee>
    1a8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8e:	23 30       	cpi	r18, 0x03	; 3
    1a90:	31 05       	cpc	r19, r1
    1a92:	71 f1       	breq	.+92     	; 0x1af0 <Dio_tog+0xa0>
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	e9 f1       	breq	.+122    	; 0x1b18 <Dio_tog+0xc8>
    1a9e:	4f c0       	rjmp	.+158    	; 0x1b3e <Dio_tog+0xee>
	{
	case PORTA_ID:
		TOG_BIT(PORTA,pin);
    1aa0:	ab e3       	ldi	r26, 0x3B	; 59
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	eb e3       	ldi	r30, 0x3B	; 59
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	48 2f       	mov	r20, r24
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	02 2e       	mov	r0, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <Dio_tog+0x6e>
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	0a 94       	dec	r0
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <Dio_tog+0x6a>
    1ac2:	84 27       	eor	r24, r20
    1ac4:	8c 93       	st	X, r24
    1ac6:	3b c0       	rjmp	.+118    	; 0x1b3e <Dio_tog+0xee>
		break;
	case PORTB_ID:
		TOG_BIT(PORTB,pin);
    1ac8:	a8 e3       	ldi	r26, 0x38	; 56
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e8 e3       	ldi	r30, 0x38	; 56
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	48 2f       	mov	r20, r24
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	02 2e       	mov	r0, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <Dio_tog+0x96>
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	0a 94       	dec	r0
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <Dio_tog+0x92>
    1aea:	84 27       	eor	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	27 c0       	rjmp	.+78     	; 0x1b3e <Dio_tog+0xee>
		break;
	case PORTC_ID:
		TOG_BIT(PORTC,pin);
    1af0:	a5 e3       	ldi	r26, 0x35	; 53
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e5 e3       	ldi	r30, 0x35	; 53
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <Dio_tog+0xbe>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <Dio_tog+0xba>
    1b12:	84 27       	eor	r24, r20
    1b14:	8c 93       	st	X, r24
    1b16:	13 c0       	rjmp	.+38     	; 0x1b3e <Dio_tog+0xee>
		break;
	case PORTD_ID:
		TOG_BIT(PORTD,pin);
    1b18:	a2 e3       	ldi	r26, 0x32	; 50
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e2 e3       	ldi	r30, 0x32	; 50
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	48 2f       	mov	r20, r24
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <Dio_tog+0xe6>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <Dio_tog+0xe2>
    1b3a:	84 27       	eor	r24, r20
    1b3c:	8c 93       	st	X, r24
		break;

	}
}
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <ADC_select>:
#include <avr/io.h>
#include "adc.h"


void ADC_select(unsigned char channel)
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	0f 92       	push	r0
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	89 83       	std	Y+1, r24	; 0x01
	// select Rf = Avcc and select ADC0 channel
	ADMUX |=(1<<REFS0) | channel;
    1b58:	a7 e2       	ldi	r26, 0x27	; 39
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e7 e2       	ldi	r30, 0x27	; 39
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	90 81       	ld	r25, Z
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	89 2b       	or	r24, r25
    1b66:	80 64       	ori	r24, 0x40	; 64
    1b68:	8c 93       	st	X, r24
	//enable ADC
	ADCSRA |=(1<<ADSC);
    1b6a:	a6 e2       	ldi	r26, 0x26	; 38
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e6 e2       	ldi	r30, 0x26	; 38
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	80 64       	ori	r24, 0x40	; 64
    1b76:	8c 93       	st	X, r24
	ADCSRA |=(1<<ADEN) |(1<<ADPS2) |(1<<ADPS1) |(1<<ADPS0);
    1b78:	a6 e2       	ldi	r26, 0x26	; 38
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e6 e2       	ldi	r30, 0x26	; 38
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	87 68       	ori	r24, 0x87	; 135
    1b84:	8c 93       	st	X, r24
}
    1b86:	0f 90       	pop	r0
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <ADC_Read>:
unsigned short ADC_Read(void)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <ADC_Read+0x6>
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <ADC_Read+0x8>
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <ADC_Read+0xa>
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
	unsigned int adcValue =0,low,high;
    1b9c:	1e 82       	std	Y+6, r1	; 0x06
    1b9e:	1d 82       	std	Y+5, r1	; 0x05
	//start conversion
	ADCSRA |=(1<<ADSC);
    1ba0:	a6 e2       	ldi	r26, 0x26	; 38
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e6 e2       	ldi	r30, 0x26	; 38
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	80 64       	ori	r24, 0x40	; 64
    1bac:	8c 93       	st	X, r24
	while(ADCSRA &(1<<ADSC));
    1bae:	e6 e2       	ldi	r30, 0x26	; 38
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	88 2f       	mov	r24, r24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	80 74       	andi	r24, 0x40	; 64
    1bba:	90 70       	andi	r25, 0x00	; 0
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	b9 f7       	brne	.-18     	; 0x1bae <ADC_Read+0x20>
	//read value
	low=(int)ADCL;
    1bc0:	e4 e2       	ldi	r30, 0x24	; 36
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9c 83       	std	Y+4, r25	; 0x04
    1bcc:	8b 83       	std	Y+3, r24	; 0x03
	high=(int)(ADCH*256);
    1bce:	e5 e2       	ldi	r30, 0x25	; 37
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	88 2f       	mov	r24, r24
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	98 2f       	mov	r25, r24
    1bda:	88 27       	eor	r24, r24
    1bdc:	9a 83       	std	Y+2, r25	; 0x02
    1bde:	89 83       	std	Y+1, r24	; 0x01
	adcValue = low + high;
    1be0:	2b 81       	ldd	r18, Y+3	; 0x03
    1be2:	3c 81       	ldd	r19, Y+4	; 0x04
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	82 0f       	add	r24, r18
    1bea:	93 1f       	adc	r25, r19
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
	return adcValue;
    1bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf2:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1bf4:	26 96       	adiw	r28, 0x06	; 6
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <H_SSD_Init>:
#include  "../../MCAL/DIO/Dio_int.h"
#include "SSD_priv.h"
#include"SSD_config.h"

void H_SSD_Init(void)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinDir(SSD_LED_A_PORT,SSD_LED_A_PIN,1);
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	61 e0       	ldi	r22, 0x01	; 1
    1c12:	41 e0       	ldi	r20, 0x01	; 1
    1c14:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_B_PORT,SSD_LED_B_PIN,1);
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	62 e0       	ldi	r22, 0x02	; 2
    1c1c:	41 e0       	ldi	r20, 0x01	; 1
    1c1e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_C_PORT,SSD_LED_C_PIN,1);
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	63 e0       	ldi	r22, 0x03	; 3
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_D_PORT,SSD_LED_D_PIN,1);
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	64 e0       	ldi	r22, 0x04	; 4
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_E_PORT,SSD_LED_E_PIN,1);
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	65 e0       	ldi	r22, 0x05	; 5
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_F_PORT,SSD_LED_F_PIN,1);
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	66 e0       	ldi	r22, 0x06	; 6
    1c44:	41 e0       	ldi	r20, 0x01	; 1
    1c46:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_G_PORT,SSD_LED_G_PIN,1);
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	67 e0       	ldi	r22, 0x07	; 7
    1c4e:	41 e0       	ldi	r20, 0x01	; 1
    1c50:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,1);
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	41 e0       	ldi	r20, 0x01	; 1
    1c5a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir( SSD_DIG_1_EN_PORT, SSD_DIG_1_EN_PIN,1);
    1c5e:	83 e0       	ldi	r24, 0x03	; 3
    1c60:	66 e0       	ldi	r22, 0x06	; 6
    1c62:	41 e0       	ldi	r20, 0x01	; 1
    1c64:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir( SSD_DIG_2_EN_PORT, SSD_DIG_2_EN_PIN,1);
    1c68:	83 e0       	ldi	r24, 0x03	; 3
    1c6a:	67 e0       	ldi	r22, 0x07	; 7
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
}
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <H_Display_number>:
void H_Display_number(u8 number)
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	a5 97       	sbiw	r28, 0x25	; 37
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	89 a3       	std	Y+33, r24	; 0x21


	if(number > 99)
    1c8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c90:	84 36       	cpi	r24, 0x64	; 100
    1c92:	08 f0       	brcs	.+2      	; 0x1c96 <H_Display_number+0x1e>
    1c94:	82 c4       	rjmp	.+2308   	; 0x259a <H_Display_number+0x922>
	{
		return;
	}
	u16 units = number%10;
    1c96:	89 a1       	ldd	r24, Y+33	; 0x21
    1c98:	9a e0       	ldi	r25, 0x0A	; 10
    1c9a:	69 2f       	mov	r22, r25
    1c9c:	0e 94 cc 1b 	call	0x3798	; 0x3798 <__udivmodqi4>
    1ca0:	89 2f       	mov	r24, r25
    1ca2:	88 2f       	mov	r24, r24
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	98 a3       	std	Y+32, r25	; 0x20
    1ca8:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 tens = number/10;
    1caa:	89 a1       	ldd	r24, Y+33	; 0x21
    1cac:	9a e0       	ldi	r25, 0x0A	; 10
    1cae:	69 2f       	mov	r22, r25
    1cb0:	0e 94 cc 1b 	call	0x3798	; 0x3798 <__udivmodqi4>
    1cb4:	8e 8f       	std	Y+30, r24	; 0x1e
	for(u8 i=0;i<SSD_DISPLAY_TIME;i++)
    1cb6:	1d 8e       	std	Y+29, r1	; 0x1d
    1cb8:	6c c4       	rjmp	.+2264   	; 0x2592 <H_Display_number+0x91a>
	{
		switch (units)
    1cba:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1cbc:	38 a1       	ldd	r19, Y+32	; 0x20
    1cbe:	3d a3       	std	Y+37, r19	; 0x25
    1cc0:	2c a3       	std	Y+36, r18	; 0x24
    1cc2:	8c a1       	ldd	r24, Y+36	; 0x24
    1cc4:	9d a1       	ldd	r25, Y+37	; 0x25
    1cc6:	84 30       	cpi	r24, 0x04	; 4
    1cc8:	91 05       	cpc	r25, r1
    1cca:	09 f4       	brne	.+2      	; 0x1cce <H_Display_number+0x56>
    1ccc:	d2 c0       	rjmp	.+420    	; 0x1e72 <H_Display_number+0x1fa>
    1cce:	2c a1       	ldd	r18, Y+36	; 0x24
    1cd0:	3d a1       	ldd	r19, Y+37	; 0x25
    1cd2:	25 30       	cpi	r18, 0x05	; 5
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	c0 f4       	brcc	.+48     	; 0x1d08 <H_Display_number+0x90>
    1cd8:	8c a1       	ldd	r24, Y+36	; 0x24
    1cda:	9d a1       	ldd	r25, Y+37	; 0x25
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	91 05       	cpc	r25, r1
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <H_Display_number+0x6c>
    1ce2:	5b c0       	rjmp	.+182    	; 0x1d9a <H_Display_number+0x122>
    1ce4:	2c a1       	ldd	r18, Y+36	; 0x24
    1ce6:	3d a1       	ldd	r19, Y+37	; 0x25
    1ce8:	21 30       	cpi	r18, 0x01	; 1
    1cea:	31 05       	cpc	r19, r1
    1cec:	90 f1       	brcs	.+100    	; 0x1d52 <H_Display_number+0xda>
    1cee:	8c a1       	ldd	r24, Y+36	; 0x24
    1cf0:	9d a1       	ldd	r25, Y+37	; 0x25
    1cf2:	82 30       	cpi	r24, 0x02	; 2
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <H_Display_number+0x82>
    1cf8:	74 c0       	rjmp	.+232    	; 0x1de2 <H_Display_number+0x16a>
    1cfa:	2c a1       	ldd	r18, Y+36	; 0x24
    1cfc:	3d a1       	ldd	r19, Y+37	; 0x25
    1cfe:	23 30       	cpi	r18, 0x03	; 3
    1d00:	31 05       	cpc	r19, r1
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <H_Display_number+0x8e>
    1d04:	92 c0       	rjmp	.+292    	; 0x1e2a <H_Display_number+0x1b2>
    1d06:	8c c1       	rjmp	.+792    	; 0x2020 <H_Display_number+0x3a8>
    1d08:	8c a1       	ldd	r24, Y+36	; 0x24
    1d0a:	9d a1       	ldd	r25, Y+37	; 0x25
    1d0c:	87 30       	cpi	r24, 0x07	; 7
    1d0e:	91 05       	cpc	r25, r1
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <H_Display_number+0x9c>
    1d12:	1b c1       	rjmp	.+566    	; 0x1f4a <H_Display_number+0x2d2>
    1d14:	2c a1       	ldd	r18, Y+36	; 0x24
    1d16:	3d a1       	ldd	r19, Y+37	; 0x25
    1d18:	28 30       	cpi	r18, 0x08	; 8
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	68 f4       	brcc	.+26     	; 0x1d38 <H_Display_number+0xc0>
    1d1e:	8c a1       	ldd	r24, Y+36	; 0x24
    1d20:	9d a1       	ldd	r25, Y+37	; 0x25
    1d22:	85 30       	cpi	r24, 0x05	; 5
    1d24:	91 05       	cpc	r25, r1
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <H_Display_number+0xb2>
    1d28:	c8 c0       	rjmp	.+400    	; 0x1eba <H_Display_number+0x242>
    1d2a:	2c a1       	ldd	r18, Y+36	; 0x24
    1d2c:	3d a1       	ldd	r19, Y+37	; 0x25
    1d2e:	26 30       	cpi	r18, 0x06	; 6
    1d30:	31 05       	cpc	r19, r1
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <H_Display_number+0xbe>
    1d34:	e6 c0       	rjmp	.+460    	; 0x1f02 <H_Display_number+0x28a>
    1d36:	74 c1       	rjmp	.+744    	; 0x2020 <H_Display_number+0x3a8>
    1d38:	8c a1       	ldd	r24, Y+36	; 0x24
    1d3a:	9d a1       	ldd	r25, Y+37	; 0x25
    1d3c:	88 30       	cpi	r24, 0x08	; 8
    1d3e:	91 05       	cpc	r25, r1
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <H_Display_number+0xcc>
    1d42:	27 c1       	rjmp	.+590    	; 0x1f92 <H_Display_number+0x31a>
    1d44:	2c a1       	ldd	r18, Y+36	; 0x24
    1d46:	3d a1       	ldd	r19, Y+37	; 0x25
    1d48:	29 30       	cpi	r18, 0x09	; 9
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <H_Display_number+0xd8>
    1d4e:	45 c1       	rjmp	.+650    	; 0x1fda <H_Display_number+0x362>
    1d50:	67 c1       	rjmp	.+718    	; 0x2020 <H_Display_number+0x3a8>
		{
		case 0:
					M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	61 e0       	ldi	r22, 0x01	; 1
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	62 e0       	ldi	r22, 0x02	; 2
    1d60:	41 e0       	ldi	r20, 0x01	; 1
    1d62:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	63 e0       	ldi	r22, 0x03	; 3
    1d6a:	41 e0       	ldi	r20, 0x01	; 1
    1d6c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	64 e0       	ldi	r22, 0x04	; 4
    1d74:	41 e0       	ldi	r20, 0x01	; 1
    1d76:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	65 e0       	ldi	r22, 0x05	; 5
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	66 e0       	ldi	r22, 0x06	; 6
    1d88:	41 e0       	ldi	r20, 0x01	; 1
    1d8a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	67 e0       	ldi	r22, 0x07	; 7
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    1d98:	43 c1       	rjmp	.+646    	; 0x2020 <H_Display_number+0x3a8>
					break;
				case 1:
					M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	61 e0       	ldi	r22, 0x01	; 1
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	62 e0       	ldi	r22, 0x02	; 2
    1da8:	41 e0       	ldi	r20, 0x01	; 1
    1daa:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	63 e0       	ldi	r22, 0x03	; 3
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>

					M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	64 e0       	ldi	r22, 0x04	; 4
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	65 e0       	ldi	r22, 0x05	; 5
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	66 e0       	ldi	r22, 0x06	; 6
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	67 e0       	ldi	r22, 0x07	; 7
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    1de0:	1f c1       	rjmp	.+574    	; 0x2020 <H_Display_number+0x3a8>
					break;
				case 2:
					M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	61 e0       	ldi	r22, 0x01	; 1
    1de6:	41 e0       	ldi	r20, 0x01	; 1
    1de8:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	62 e0       	ldi	r22, 0x02	; 2
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	63 e0       	ldi	r22, 0x03	; 3
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>

					M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	64 e0       	ldi	r22, 0x04	; 4
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	65 e0       	ldi	r22, 0x05	; 5
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	66 e0       	ldi	r22, 0x06	; 6
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	67 e0       	ldi	r22, 0x07	; 7
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    1e28:	fb c0       	rjmp	.+502    	; 0x2020 <H_Display_number+0x3a8>
					break;
				case 3:
					M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	61 e0       	ldi	r22, 0x01	; 1
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	62 e0       	ldi	r22, 0x02	; 2
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	63 e0       	ldi	r22, 0x03	; 3
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	64 e0       	ldi	r22, 0x04	; 4
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	65 e0       	ldi	r22, 0x05	; 5
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	66 e0       	ldi	r22, 0x06	; 6
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	67 e0       	ldi	r22, 0x07	; 7
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    1e70:	d7 c0       	rjmp	.+430    	; 0x2020 <H_Display_number+0x3a8>
					break;
				case 4:
					M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	61 e0       	ldi	r22, 0x01	; 1
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	62 e0       	ldi	r22, 0x02	; 2
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	63 e0       	ldi	r22, 0x03	; 3
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	64 e0       	ldi	r22, 0x04	; 4
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	65 e0       	ldi	r22, 0x05	; 5
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	66 e0       	ldi	r22, 0x06	; 6
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	67 e0       	ldi	r22, 0x07	; 7
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    1eb8:	b3 c0       	rjmp	.+358    	; 0x2020 <H_Display_number+0x3a8>
					break;
				case 5:
					M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	62 e0       	ldi	r22, 0x02	; 2
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	63 e0       	ldi	r22, 0x03	; 3
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	64 e0       	ldi	r22, 0x04	; 4
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	65 e0       	ldi	r22, 0x05	; 5
    1ee6:	40 e0       	ldi	r20, 0x00	; 0
    1ee8:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	66 e0       	ldi	r22, 0x06	; 6
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	67 e0       	ldi	r22, 0x07	; 7
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    1f00:	8f c0       	rjmp	.+286    	; 0x2020 <H_Display_number+0x3a8>
					break;
				case 6:
					M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	61 e0       	ldi	r22, 0x01	; 1
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	62 e0       	ldi	r22, 0x02	; 2
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	63 e0       	ldi	r22, 0x03	; 3
    1f1a:	41 e0       	ldi	r20, 0x01	; 1
    1f1c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	64 e0       	ldi	r22, 0x04	; 4
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	65 e0       	ldi	r22, 0x05	; 5
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	66 e0       	ldi	r22, 0x06	; 6
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	67 e0       	ldi	r22, 0x07	; 7
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    1f48:	6b c0       	rjmp	.+214    	; 0x2020 <H_Display_number+0x3a8>
					break;
				case 7:
					M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	61 e0       	ldi	r22, 0x01	; 1
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	62 e0       	ldi	r22, 0x02	; 2
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	63 e0       	ldi	r22, 0x03	; 3
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	64 e0       	ldi	r22, 0x04	; 4
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	65 e0       	ldi	r22, 0x05	; 5
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	66 e0       	ldi	r22, 0x06	; 6
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	67 e0       	ldi	r22, 0x07	; 7
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    1f90:	47 c0       	rjmp	.+142    	; 0x2020 <H_Display_number+0x3a8>
					break;
				case 8:
					M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	61 e0       	ldi	r22, 0x01	; 1
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	62 e0       	ldi	r22, 0x02	; 2
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	63 e0       	ldi	r22, 0x03	; 3
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	64 e0       	ldi	r22, 0x04	; 4
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	65 e0       	ldi	r22, 0x05	; 5
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	66 e0       	ldi	r22, 0x06	; 6
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	67 e0       	ldi	r22, 0x07	; 7
    1fd2:	41 e0       	ldi	r20, 0x01	; 1
    1fd4:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    1fd8:	23 c0       	rjmp	.+70     	; 0x2020 <H_Display_number+0x3a8>
					break;
				case 9:
					M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	61 e0       	ldi	r22, 0x01	; 1
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	62 e0       	ldi	r22, 0x02	; 2
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	63 e0       	ldi	r22, 0x03	; 3
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	64 e0       	ldi	r22, 0x04	; 4
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	65 e0       	ldi	r22, 0x05	; 5
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	66 e0       	ldi	r22, 0x06	; 6
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	67 e0       	ldi	r22, 0x07	; 7
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
					break;
		}
		// enable digit 1(units)
		M_Dio_void_setPinValue( SSD_DIG_1_EN_PORT, SSD_DIG_1_EN_PIN,HIGH);
    2020:	83 e0       	ldi	r24, 0x03	; 3
    2022:	66 e0       	ldi	r22, 0x06	; 6
    2024:	41 e0       	ldi	r20, 0x01	; 1
    2026:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
		// disable digit 2 (tens)
		M_Dio_void_setPinValue( SSD_DIG_2_EN_PORT, SSD_DIG_2_EN_PIN,LOW);
    202a:	83 e0       	ldi	r24, 0x03	; 3
    202c:	67 e0       	ldi	r22, 0x07	; 7
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e8       	ldi	r26, 0x80	; 128
    203a:	bf e3       	ldi	r27, 0x3F	; 63
    203c:	89 8f       	std	Y+25, r24	; 0x19
    203e:	9a 8f       	std	Y+26, r25	; 0x1a
    2040:	ab 8f       	std	Y+27, r26	; 0x1b
    2042:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2044:	69 8d       	ldd	r22, Y+25	; 0x19
    2046:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2048:	8b 8d       	ldd	r24, Y+27	; 0x1b
    204a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	4a e7       	ldi	r20, 0x7A	; 122
    2052:	53 e4       	ldi	r21, 0x43	; 67
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	8d 8b       	std	Y+21, r24	; 0x15
    205e:	9e 8b       	std	Y+22, r25	; 0x16
    2060:	af 8b       	std	Y+23, r26	; 0x17
    2062:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2064:	6d 89       	ldd	r22, Y+21	; 0x15
    2066:	7e 89       	ldd	r23, Y+22	; 0x16
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e8       	ldi	r20, 0x80	; 128
    2072:	5f e3       	ldi	r21, 0x3F	; 63
    2074:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2078:	88 23       	and	r24, r24
    207a:	2c f4       	brge	.+10     	; 0x2086 <H_Display_number+0x40e>
		__ticks = 1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9c 8b       	std	Y+20, r25	; 0x14
    2082:	8b 8b       	std	Y+19, r24	; 0x13
    2084:	3f c0       	rjmp	.+126    	; 0x2104 <H_Display_number+0x48c>
	else if (__tmp > 65535)
    2086:	6d 89       	ldd	r22, Y+21	; 0x15
    2088:	7e 89       	ldd	r23, Y+22	; 0x16
    208a:	8f 89       	ldd	r24, Y+23	; 0x17
    208c:	98 8d       	ldd	r25, Y+24	; 0x18
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	3f ef       	ldi	r19, 0xFF	; 255
    2092:	4f e7       	ldi	r20, 0x7F	; 127
    2094:	57 e4       	ldi	r21, 0x47	; 71
    2096:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    209a:	18 16       	cp	r1, r24
    209c:	4c f5       	brge	.+82     	; 0x20f0 <H_Display_number+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209e:	69 8d       	ldd	r22, Y+25	; 0x19
    20a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e2       	ldi	r20, 0x20	; 32
    20ac:	51 e4       	ldi	r21, 0x41	; 65
    20ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	bc 01       	movw	r22, r24
    20b8:	cd 01       	movw	r24, r26
    20ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	9c 8b       	std	Y+20, r25	; 0x14
    20c4:	8b 8b       	std	Y+19, r24	; 0x13
    20c6:	0f c0       	rjmp	.+30     	; 0x20e6 <H_Display_number+0x46e>
    20c8:	89 e1       	ldi	r24, 0x19	; 25
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9a 8b       	std	Y+18, r25	; 0x12
    20ce:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20d0:	89 89       	ldd	r24, Y+17	; 0x11
    20d2:	9a 89       	ldd	r25, Y+18	; 0x12
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <H_Display_number+0x45c>
    20d8:	9a 8b       	std	Y+18, r25	; 0x12
    20da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20dc:	8b 89       	ldd	r24, Y+19	; 0x13
    20de:	9c 89       	ldd	r25, Y+20	; 0x14
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	9c 8b       	std	Y+20, r25	; 0x14
    20e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e6:	8b 89       	ldd	r24, Y+19	; 0x13
    20e8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	69 f7       	brne	.-38     	; 0x20c8 <H_Display_number+0x450>
    20ee:	14 c0       	rjmp	.+40     	; 0x2118 <H_Display_number+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f0:	6d 89       	ldd	r22, Y+21	; 0x15
    20f2:	7e 89       	ldd	r23, Y+22	; 0x16
    20f4:	8f 89       	ldd	r24, Y+23	; 0x17
    20f6:	98 8d       	ldd	r25, Y+24	; 0x18
    20f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9c 8b       	std	Y+20, r25	; 0x14
    2102:	8b 8b       	std	Y+19, r24	; 0x13
    2104:	8b 89       	ldd	r24, Y+19	; 0x13
    2106:	9c 89       	ldd	r25, Y+20	; 0x14
    2108:	98 8b       	std	Y+16, r25	; 0x10
    210a:	8f 87       	std	Y+15, r24	; 0x0f
    210c:	8f 85       	ldd	r24, Y+15	; 0x0f
    210e:	98 89       	ldd	r25, Y+16	; 0x10
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <H_Display_number+0x498>
    2114:	98 8b       	std	Y+16, r25	; 0x10
    2116:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		//disable digit1 (units)
		M_Dio_void_setPinValue( SSD_DIG_1_EN_PORT, SSD_DIG_1_EN_PIN,LOW);
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	66 e0       	ldi	r22, 0x06	; 6
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
		//	_delay_ms(1);

		switch (tens)
    2122:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	3b a3       	std	Y+35, r19	; 0x23
    212a:	2a a3       	std	Y+34, r18	; 0x22
    212c:	8a a1       	ldd	r24, Y+34	; 0x22
    212e:	9b a1       	ldd	r25, Y+35	; 0x23
    2130:	84 30       	cpi	r24, 0x04	; 4
    2132:	91 05       	cpc	r25, r1
    2134:	09 f4       	brne	.+2      	; 0x2138 <H_Display_number+0x4c0>
    2136:	d7 c0       	rjmp	.+430    	; 0x22e6 <H_Display_number+0x66e>
    2138:	2a a1       	ldd	r18, Y+34	; 0x22
    213a:	3b a1       	ldd	r19, Y+35	; 0x23
    213c:	25 30       	cpi	r18, 0x05	; 5
    213e:	31 05       	cpc	r19, r1
    2140:	ec f4       	brge	.+58     	; 0x217c <H_Display_number+0x504>
    2142:	8a a1       	ldd	r24, Y+34	; 0x22
    2144:	9b a1       	ldd	r25, Y+35	; 0x23
    2146:	81 30       	cpi	r24, 0x01	; 1
    2148:	91 05       	cpc	r25, r1
    214a:	09 f4       	brne	.+2      	; 0x214e <H_Display_number+0x4d6>
    214c:	60 c0       	rjmp	.+192    	; 0x220e <H_Display_number+0x596>
    214e:	2a a1       	ldd	r18, Y+34	; 0x22
    2150:	3b a1       	ldd	r19, Y+35	; 0x23
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	31 05       	cpc	r19, r1
    2156:	2c f4       	brge	.+10     	; 0x2162 <H_Display_number+0x4ea>
    2158:	8a a1       	ldd	r24, Y+34	; 0x22
    215a:	9b a1       	ldd	r25, Y+35	; 0x23
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	99 f1       	breq	.+102    	; 0x21c6 <H_Display_number+0x54e>
    2160:	99 c1       	rjmp	.+818    	; 0x2494 <H_Display_number+0x81c>
    2162:	2a a1       	ldd	r18, Y+34	; 0x22
    2164:	3b a1       	ldd	r19, Y+35	; 0x23
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	31 05       	cpc	r19, r1
    216a:	09 f4       	brne	.+2      	; 0x216e <H_Display_number+0x4f6>
    216c:	74 c0       	rjmp	.+232    	; 0x2256 <H_Display_number+0x5de>
    216e:	8a a1       	ldd	r24, Y+34	; 0x22
    2170:	9b a1       	ldd	r25, Y+35	; 0x23
    2172:	83 30       	cpi	r24, 0x03	; 3
    2174:	91 05       	cpc	r25, r1
    2176:	09 f4       	brne	.+2      	; 0x217a <H_Display_number+0x502>
    2178:	92 c0       	rjmp	.+292    	; 0x229e <H_Display_number+0x626>
    217a:	8c c1       	rjmp	.+792    	; 0x2494 <H_Display_number+0x81c>
    217c:	2a a1       	ldd	r18, Y+34	; 0x22
    217e:	3b a1       	ldd	r19, Y+35	; 0x23
    2180:	27 30       	cpi	r18, 0x07	; 7
    2182:	31 05       	cpc	r19, r1
    2184:	09 f4       	brne	.+2      	; 0x2188 <H_Display_number+0x510>
    2186:	1b c1       	rjmp	.+566    	; 0x23be <H_Display_number+0x746>
    2188:	8a a1       	ldd	r24, Y+34	; 0x22
    218a:	9b a1       	ldd	r25, Y+35	; 0x23
    218c:	88 30       	cpi	r24, 0x08	; 8
    218e:	91 05       	cpc	r25, r1
    2190:	6c f4       	brge	.+26     	; 0x21ac <H_Display_number+0x534>
    2192:	2a a1       	ldd	r18, Y+34	; 0x22
    2194:	3b a1       	ldd	r19, Y+35	; 0x23
    2196:	25 30       	cpi	r18, 0x05	; 5
    2198:	31 05       	cpc	r19, r1
    219a:	09 f4       	brne	.+2      	; 0x219e <H_Display_number+0x526>
    219c:	c8 c0       	rjmp	.+400    	; 0x232e <H_Display_number+0x6b6>
    219e:	8a a1       	ldd	r24, Y+34	; 0x22
    21a0:	9b a1       	ldd	r25, Y+35	; 0x23
    21a2:	86 30       	cpi	r24, 0x06	; 6
    21a4:	91 05       	cpc	r25, r1
    21a6:	09 f4       	brne	.+2      	; 0x21aa <H_Display_number+0x532>
    21a8:	e6 c0       	rjmp	.+460    	; 0x2376 <H_Display_number+0x6fe>
    21aa:	74 c1       	rjmp	.+744    	; 0x2494 <H_Display_number+0x81c>
    21ac:	2a a1       	ldd	r18, Y+34	; 0x22
    21ae:	3b a1       	ldd	r19, Y+35	; 0x23
    21b0:	28 30       	cpi	r18, 0x08	; 8
    21b2:	31 05       	cpc	r19, r1
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <H_Display_number+0x540>
    21b6:	27 c1       	rjmp	.+590    	; 0x2406 <H_Display_number+0x78e>
    21b8:	8a a1       	ldd	r24, Y+34	; 0x22
    21ba:	9b a1       	ldd	r25, Y+35	; 0x23
    21bc:	89 30       	cpi	r24, 0x09	; 9
    21be:	91 05       	cpc	r25, r1
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <H_Display_number+0x54c>
    21c2:	45 c1       	rjmp	.+650    	; 0x244e <H_Display_number+0x7d6>
    21c4:	67 c1       	rjmp	.+718    	; 0x2494 <H_Display_number+0x81c>
		{
		case 0:
			M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	61 e0       	ldi	r22, 0x01	; 1
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	62 e0       	ldi	r22, 0x02	; 2
    21d4:	41 e0       	ldi	r20, 0x01	; 1
    21d6:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	63 e0       	ldi	r22, 0x03	; 3
    21de:	41 e0       	ldi	r20, 0x01	; 1
    21e0:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	64 e0       	ldi	r22, 0x04	; 4
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	65 e0       	ldi	r22, 0x05	; 5
    21f2:	41 e0       	ldi	r20, 0x01	; 1
    21f4:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	66 e0       	ldi	r22, 0x06	; 6
    21fc:	41 e0       	ldi	r20, 0x01	; 1
    21fe:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	67 e0       	ldi	r22, 0x07	; 7
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    220c:	43 c1       	rjmp	.+646    	; 0x2494 <H_Display_number+0x81c>
			break;
		case 1:
			M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	61 e0       	ldi	r22, 0x01	; 1
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	62 e0       	ldi	r22, 0x02	; 2
    221c:	41 e0       	ldi	r20, 0x01	; 1
    221e:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	63 e0       	ldi	r22, 0x03	; 3
    2226:	41 e0       	ldi	r20, 0x01	; 1
    2228:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>

			M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	64 e0       	ldi	r22, 0x04	; 4
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	65 e0       	ldi	r22, 0x05	; 5
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	66 e0       	ldi	r22, 0x06	; 6
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	67 e0       	ldi	r22, 0x07	; 7
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    2254:	1f c1       	rjmp	.+574    	; 0x2494 <H_Display_number+0x81c>
			break;
		case 2:
			M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	61 e0       	ldi	r22, 0x01	; 1
    225a:	41 e0       	ldi	r20, 0x01	; 1
    225c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	62 e0       	ldi	r22, 0x02	; 2
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	63 e0       	ldi	r22, 0x03	; 3
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>

			M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	64 e0       	ldi	r22, 0x04	; 4
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	65 e0       	ldi	r22, 0x05	; 5
    2282:	41 e0       	ldi	r20, 0x01	; 1
    2284:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	66 e0       	ldi	r22, 0x06	; 6
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	67 e0       	ldi	r22, 0x07	; 7
    2296:	41 e0       	ldi	r20, 0x01	; 1
    2298:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    229c:	fb c0       	rjmp	.+502    	; 0x2494 <H_Display_number+0x81c>
			break;
		case 3:
			M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	61 e0       	ldi	r22, 0x01	; 1
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	62 e0       	ldi	r22, 0x02	; 2
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	63 e0       	ldi	r22, 0x03	; 3
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	64 e0       	ldi	r22, 0x04	; 4
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	65 e0       	ldi	r22, 0x05	; 5
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	66 e0       	ldi	r22, 0x06	; 6
    22d4:	40 e0       	ldi	r20, 0x00	; 0
    22d6:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	67 e0       	ldi	r22, 0x07	; 7
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    22e4:	d7 c0       	rjmp	.+430    	; 0x2494 <H_Display_number+0x81c>
			break;
		case 4:
			M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	61 e0       	ldi	r22, 0x01	; 1
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	62 e0       	ldi	r22, 0x02	; 2
    22f4:	41 e0       	ldi	r20, 0x01	; 1
    22f6:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	63 e0       	ldi	r22, 0x03	; 3
    22fe:	41 e0       	ldi	r20, 0x01	; 1
    2300:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	64 e0       	ldi	r22, 0x04	; 4
    2308:	40 e0       	ldi	r20, 0x00	; 0
    230a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	65 e0       	ldi	r22, 0x05	; 5
    2312:	40 e0       	ldi	r20, 0x00	; 0
    2314:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	66 e0       	ldi	r22, 0x06	; 6
    231c:	41 e0       	ldi	r20, 0x01	; 1
    231e:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	67 e0       	ldi	r22, 0x07	; 7
    2326:	41 e0       	ldi	r20, 0x01	; 1
    2328:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    232c:	b3 c0       	rjmp	.+358    	; 0x2494 <H_Display_number+0x81c>
			break;
		case 5:
			M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	61 e0       	ldi	r22, 0x01	; 1
    2332:	41 e0       	ldi	r20, 0x01	; 1
    2334:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	62 e0       	ldi	r22, 0x02	; 2
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	63 e0       	ldi	r22, 0x03	; 3
    2346:	41 e0       	ldi	r20, 0x01	; 1
    2348:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	64 e0       	ldi	r22, 0x04	; 4
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	65 e0       	ldi	r22, 0x05	; 5
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	66 e0       	ldi	r22, 0x06	; 6
    2364:	41 e0       	ldi	r20, 0x01	; 1
    2366:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	67 e0       	ldi	r22, 0x07	; 7
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    2374:	8f c0       	rjmp	.+286    	; 0x2494 <H_Display_number+0x81c>
			break;
		case 6:
			M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	61 e0       	ldi	r22, 0x01	; 1
    237a:	41 e0       	ldi	r20, 0x01	; 1
    237c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	62 e0       	ldi	r22, 0x02	; 2
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	63 e0       	ldi	r22, 0x03	; 3
    238e:	41 e0       	ldi	r20, 0x01	; 1
    2390:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	64 e0       	ldi	r22, 0x04	; 4
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	65 e0       	ldi	r22, 0x05	; 5
    23a2:	41 e0       	ldi	r20, 0x01	; 1
    23a4:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	66 e0       	ldi	r22, 0x06	; 6
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	67 e0       	ldi	r22, 0x07	; 7
    23b6:	41 e0       	ldi	r20, 0x01	; 1
    23b8:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    23bc:	6b c0       	rjmp	.+214    	; 0x2494 <H_Display_number+0x81c>
			break;
		case 7:
			M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	61 e0       	ldi	r22, 0x01	; 1
    23c2:	41 e0       	ldi	r20, 0x01	; 1
    23c4:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	62 e0       	ldi	r22, 0x02	; 2
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	63 e0       	ldi	r22, 0x03	; 3
    23d6:	41 e0       	ldi	r20, 0x01	; 1
    23d8:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	64 e0       	ldi	r22, 0x04	; 4
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	65 e0       	ldi	r22, 0x05	; 5
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	66 e0       	ldi	r22, 0x06	; 6
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	67 e0       	ldi	r22, 0x07	; 7
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    2404:	47 c0       	rjmp	.+142    	; 0x2494 <H_Display_number+0x81c>
			break;
		case 8:
			M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	61 e0       	ldi	r22, 0x01	; 1
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	62 e0       	ldi	r22, 0x02	; 2
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	63 e0       	ldi	r22, 0x03	; 3
    241e:	41 e0       	ldi	r20, 0x01	; 1
    2420:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	64 e0       	ldi	r22, 0x04	; 4
    2428:	41 e0       	ldi	r20, 0x01	; 1
    242a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	65 e0       	ldi	r22, 0x05	; 5
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	66 e0       	ldi	r22, 0x06	; 6
    243c:	41 e0       	ldi	r20, 0x01	; 1
    243e:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	67 e0       	ldi	r22, 0x07	; 7
    2446:	41 e0       	ldi	r20, 0x01	; 1
    2448:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    244c:	23 c0       	rjmp	.+70     	; 0x2494 <H_Display_number+0x81c>
			break;
		case 9:
			M_Dio_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	61 e0       	ldi	r22, 0x01	; 1
    2452:	41 e0       	ldi	r20, 0x01	; 1
    2454:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	62 e0       	ldi	r22, 0x02	; 2
    245c:	41 e0       	ldi	r20, 0x01	; 1
    245e:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	63 e0       	ldi	r22, 0x03	; 3
    2466:	41 e0       	ldi	r20, 0x01	; 1
    2468:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	64 e0       	ldi	r22, 0x04	; 4
    2470:	41 e0       	ldi	r20, 0x01	; 1
    2472:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	65 e0       	ldi	r22, 0x05	; 5
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	66 e0       	ldi	r22, 0x06	; 6
    2484:	41 e0       	ldi	r20, 0x01	; 1
    2486:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			M_Dio_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	67 e0       	ldi	r22, 0x07	; 7
    248e:	41 e0       	ldi	r20, 0x01	; 1
    2490:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
			break;

		}
		// enable digit 2(units)
		M_Dio_void_setPinValue( SSD_DIG_2_EN_PORT, SSD_DIG_2_EN_PIN,HIGH);
    2494:	83 e0       	ldi	r24, 0x03	; 3
    2496:	67 e0       	ldi	r22, 0x07	; 7
    2498:	41 e0       	ldi	r20, 0x01	; 1
    249a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	a0 e8       	ldi	r26, 0x80	; 128
    24a4:	bf e3       	ldi	r27, 0x3F	; 63
    24a6:	8b 87       	std	Y+11, r24	; 0x0b
    24a8:	9c 87       	std	Y+12, r25	; 0x0c
    24aa:	ad 87       	std	Y+13, r26	; 0x0d
    24ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	4a e7       	ldi	r20, 0x7A	; 122
    24bc:	53 e4       	ldi	r21, 0x43	; 67
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	8f 83       	std	Y+7, r24	; 0x07
    24c8:	98 87       	std	Y+8, r25	; 0x08
    24ca:	a9 87       	std	Y+9, r26	; 0x09
    24cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e8       	ldi	r20, 0x80	; 128
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e2:	88 23       	and	r24, r24
    24e4:	2c f4       	brge	.+10     	; 0x24f0 <H_Display_number+0x878>
		__ticks = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9e 83       	std	Y+6, r25	; 0x06
    24ec:	8d 83       	std	Y+5, r24	; 0x05
    24ee:	3f c0       	rjmp	.+126    	; 0x256e <H_Display_number+0x8f6>
	else if (__tmp > 65535)
    24f0:	6f 81       	ldd	r22, Y+7	; 0x07
    24f2:	78 85       	ldd	r23, Y+8	; 0x08
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	3f ef       	ldi	r19, 0xFF	; 255
    24fc:	4f e7       	ldi	r20, 0x7F	; 127
    24fe:	57 e4       	ldi	r21, 0x47	; 71
    2500:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2504:	18 16       	cp	r1, r24
    2506:	4c f5       	brge	.+82     	; 0x255a <H_Display_number+0x8e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2508:	6b 85       	ldd	r22, Y+11	; 0x0b
    250a:	7c 85       	ldd	r23, Y+12	; 0x0c
    250c:	8d 85       	ldd	r24, Y+13	; 0x0d
    250e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
    2530:	0f c0       	rjmp	.+30     	; 0x2550 <H_Display_number+0x8d8>
    2532:	89 e1       	ldi	r24, 0x19	; 25
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9c 83       	std	Y+4, r25	; 0x04
    2538:	8b 83       	std	Y+3, r24	; 0x03
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	9c 81       	ldd	r25, Y+4	; 0x04
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <H_Display_number+0x8c6>
    2542:	9c 83       	std	Y+4, r25	; 0x04
    2544:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	9e 83       	std	Y+6, r25	; 0x06
    254e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	69 f7       	brne	.-38     	; 0x2532 <H_Display_number+0x8ba>
    2558:	14 c0       	rjmp	.+40     	; 0x2582 <H_Display_number+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255a:	6f 81       	ldd	r22, Y+7	; 0x07
    255c:	78 85       	ldd	r23, Y+8	; 0x08
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	9a 83       	std	Y+2, r25	; 0x02
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	9a 81       	ldd	r25, Y+2	; 0x02
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <H_Display_number+0x902>
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		//disable digit1 (units)
		M_Dio_void_setPinValue( SSD_DIG_2_EN_PORT, SSD_DIG_2_EN_PIN,LOW);
    2582:	83 e0       	ldi	r24, 0x03	; 3
    2584:	67 e0       	ldi	r22, 0x07	; 7
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
	{
		return;
	}
	u16 units = number%10;
	u8 tens = number/10;
	for(u8 i=0;i<SSD_DISPLAY_TIME;i++)
    258c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    258e:	8f 5f       	subi	r24, 0xFF	; 255
    2590:	8d 8f       	std	Y+29, r24	; 0x1d
    2592:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2594:	8a 3f       	cpi	r24, 0xFA	; 250
    2596:	08 f4       	brcc	.+2      	; 0x259a <H_Display_number+0x922>
    2598:	90 cb       	rjmp	.-2272   	; 0x1cba <H_Display_number+0x42>
		_delay_ms(1);
		//disable digit1 (units)
		M_Dio_void_setPinValue( SSD_DIG_2_EN_PORT, SSD_DIG_2_EN_PIN,LOW);
		//_delay_ms(1);
	}
}
    259a:	a5 96       	adiw	r28, 0x25	; 37
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	de bf       	out	0x3e, r29	; 62
    25a2:	0f be       	out	0x3f, r0	; 63
    25a4:	cd bf       	out	0x3d, r28	; 61
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <H_Led_void_ledINit>:
#include  "led_config.h"
#include "led_int.h"
#include "Dio_int.h"
#include "../../LIB/std_types2.h"
void H_Led_void_ledINit(u8 LedID)
{
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <H_Led_void_ledINit+0x6>
    25b2:	0f 92       	push	r0
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	3b 83       	std	Y+3, r19	; 0x03
    25c2:	2a 83       	std	Y+2, r18	; 0x02
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	9b 81       	ldd	r25, Y+3	; 0x03
    25c8:	81 30       	cpi	r24, 0x01	; 1
    25ca:	91 05       	cpc	r25, r1
    25cc:	79 f0       	breq	.+30     	; 0x25ec <H_Led_void_ledINit+0x40>
    25ce:	2a 81       	ldd	r18, Y+2	; 0x02
    25d0:	3b 81       	ldd	r19, Y+3	; 0x03
    25d2:	22 30       	cpi	r18, 0x02	; 2
    25d4:	31 05       	cpc	r19, r1
    25d6:	81 f0       	breq	.+32     	; 0x25f8 <H_Led_void_ledINit+0x4c>
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	9b 81       	ldd	r25, Y+3	; 0x03
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	89 f4       	brne	.+34     	; 0x2602 <H_Led_void_ledINit+0x56>
	{
	case Red_Led:
		M_Dio_void_setPinDir(LED_RED_PORT,LED_RED_PIN,1);
    25e0:	83 e0       	ldi	r24, 0x03	; 3
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
    25ea:	0b c0       	rjmp	.+22     	; 0x2602 <H_Led_void_ledINit+0x56>
		break;
	case Grn_Led:
		M_Dio_void_setPinDir(LED_GREEN_PORT,LED_GREEN_PIN,1);
    25ec:	83 e0       	ldi	r24, 0x03	; 3
    25ee:	61 e0       	ldi	r22, 0x01	; 1
    25f0:	41 e0       	ldi	r20, 0x01	; 1
    25f2:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
    25f6:	05 c0       	rjmp	.+10     	; 0x2602 <H_Led_void_ledINit+0x56>
		break;
	case Blu_Led:
		M_Dio_void_setPinDir(LED_BLU_PORT,LED_BLU_PIN,1);
    25f8:	83 e0       	ldi	r24, 0x03	; 3
    25fa:	62 e0       	ldi	r22, 0x02	; 2
    25fc:	41 e0       	ldi	r20, 0x01	; 1
    25fe:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
		break;

	}
}
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <H_Led_void_setON>:
void H_Led_void_setON(u8 LedID)
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <H_Led_void_setON+0x6>
    2614:	0f 92       	push	r0
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	3b 83       	std	Y+3, r19	; 0x03
    2624:	2a 83       	std	Y+2, r18	; 0x02
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	9b 81       	ldd	r25, Y+3	; 0x03
    262a:	81 30       	cpi	r24, 0x01	; 1
    262c:	91 05       	cpc	r25, r1
    262e:	79 f0       	breq	.+30     	; 0x264e <H_Led_void_setON+0x40>
    2630:	2a 81       	ldd	r18, Y+2	; 0x02
    2632:	3b 81       	ldd	r19, Y+3	; 0x03
    2634:	22 30       	cpi	r18, 0x02	; 2
    2636:	31 05       	cpc	r19, r1
    2638:	81 f0       	breq	.+32     	; 0x265a <H_Led_void_setON+0x4c>
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	9b 81       	ldd	r25, Y+3	; 0x03
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	89 f4       	brne	.+34     	; 0x2664 <H_Led_void_setON+0x56>
	{
	case Red_Led:
#if(LED_RED_DIRECTION == LED_FORWARD)
	{
		M_Dio_void_setPinValue(LED_RED_PORT,LED_RED_PIN,1);
    2642:	83 e0       	ldi	r24, 0x03	; 3
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	41 e0       	ldi	r20, 0x01	; 1
    2648:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    264c:	0b c0       	rjmp	.+22     	; 0x2664 <H_Led_void_setON+0x56>
	}
#endif
	break;
	case Grn_Led:
#if(LED_GREEN_DIRECTION == LED_FORWARD)
		M_Dio_void_setPinValue(LED_GREEN_PORT,LED_GREEN_PIN,1);
    264e:	83 e0       	ldi	r24, 0x03	; 3
    2650:	61 e0       	ldi	r22, 0x01	; 1
    2652:	41 e0       	ldi	r20, 0x01	; 1
    2654:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    2658:	05 c0       	rjmp	.+10     	; 0x2664 <H_Led_void_setON+0x56>
#endif
		break;
	case Blu_Led:
#if(LED_BLU_DIRECTION == LED_FORWARD)
	{
		M_Dio_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,1);
    265a:	83 e0       	ldi	r24, 0x03	; 3
    265c:	62 e0       	ldi	r22, 0x02	; 2
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
#endif
	break;


}
}
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <H_Led_void_setOFF>:
void H_Led_void_setOFF(u8 LedID)
{
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	00 d0       	rcall	.+0      	; 0x2676 <H_Led_void_setOFF+0x6>
    2676:	0f 92       	push	r0
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	3b 83       	std	Y+3, r19	; 0x03
    2686:	2a 83       	std	Y+2, r18	; 0x02
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	9b 81       	ldd	r25, Y+3	; 0x03
    268c:	81 30       	cpi	r24, 0x01	; 1
    268e:	91 05       	cpc	r25, r1
    2690:	79 f0       	breq	.+30     	; 0x26b0 <H_Led_void_setOFF+0x40>
    2692:	2a 81       	ldd	r18, Y+2	; 0x02
    2694:	3b 81       	ldd	r19, Y+3	; 0x03
    2696:	22 30       	cpi	r18, 0x02	; 2
    2698:	31 05       	cpc	r19, r1
    269a:	81 f0       	breq	.+32     	; 0x26bc <H_Led_void_setOFF+0x4c>
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	9b 81       	ldd	r25, Y+3	; 0x03
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	89 f4       	brne	.+34     	; 0x26c6 <H_Led_void_setOFF+0x56>
	{
	case Red_Led:
#if(LED_RED_DIRECTION == LED_FORWARD)
	{
		M_Dio_void_setPinValue(LED_RED_PORT,LED_RED_PIN,0);
    26a4:	83 e0       	ldi	r24, 0x03	; 3
    26a6:	60 e0       	ldi	r22, 0x00	; 0
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    26ae:	0b c0       	rjmp	.+22     	; 0x26c6 <H_Led_void_setOFF+0x56>
#endif
	break;
	case Grn_Led:
#if(LED_RED_DIRECTION == LED_FORWARD)
	{
		M_Dio_void_setPinValue(LED_GREEN_PORT,LED_GREEN_PIN,0);
    26b0:	83 e0       	ldi	r24, 0x03	; 3
    26b2:	61 e0       	ldi	r22, 0x01	; 1
    26b4:	40 e0       	ldi	r20, 0x00	; 0
    26b6:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    26ba:	05 c0       	rjmp	.+10     	; 0x26c6 <H_Led_void_setOFF+0x56>
#endif
	break;
	case Blu_Led:
#if(LED_RED_DIRECTION == LED_FORWARD)
	{
		M_Dio_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,0);
    26bc:	83 e0       	ldi	r24, 0x03	; 3
    26be:	62 e0       	ldi	r22, 0x02	; 2
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
	}
#endif
	break;

}
}
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <H_Led_void_toggle>:
void H_Led_void_toggle(u8 LedID)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <H_Led_void_toggle+0x6>
    26d8:	0f 92       	push	r0
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	3b 83       	std	Y+3, r19	; 0x03
    26e8:	2a 83       	std	Y+2, r18	; 0x02
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	9b 81       	ldd	r25, Y+3	; 0x03
    26ee:	81 30       	cpi	r24, 0x01	; 1
    26f0:	91 05       	cpc	r25, r1
    26f2:	71 f0       	breq	.+28     	; 0x2710 <H_Led_void_toggle+0x3e>
    26f4:	2a 81       	ldd	r18, Y+2	; 0x02
    26f6:	3b 81       	ldd	r19, Y+3	; 0x03
    26f8:	22 30       	cpi	r18, 0x02	; 2
    26fa:	31 05       	cpc	r19, r1
    26fc:	71 f0       	breq	.+28     	; 0x271a <H_Led_void_toggle+0x48>
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	9b 81       	ldd	r25, Y+3	; 0x03
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	71 f4       	brne	.+28     	; 0x2722 <H_Led_void_toggle+0x50>
	{
	case Red_Led:
		Dio_tog(LED_RED_PORT,LED_RED_PIN);
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <Dio_tog>
    270e:	09 c0       	rjmp	.+18     	; 0x2722 <H_Led_void_toggle+0x50>
		break;
	case Grn_Led:
		Dio_tog(LED_GREEN_PORT,LED_GREEN_PIN);
    2710:	83 e0       	ldi	r24, 0x03	; 3
    2712:	61 e0       	ldi	r22, 0x01	; 1
    2714:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <Dio_tog>
    2718:	04 c0       	rjmp	.+8      	; 0x2722 <H_Led_void_toggle+0x50>
		break;
	case Blu_Led:
		Dio_tog(LED_BLU_PORT,LED_BLU_PIN);
    271a:	83 e0       	ldi	r24, 0x03	; 3
    271c:	62 e0       	ldi	r22, 0x02	; 2
    271e:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <Dio_tog>
		break;

	}
}
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <H_LCD_void_Init>:

#include "LCD_priv.h"
#include "LCD_config.h"
#include "LCD_int.h"
void H_LCD_void_Init(void)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	aa 97       	sbiw	r28, 0x2a	; 42
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61

	// set direction Rs, EN
	M_Dio_void_setPinDir(LCD_RS_PORT, LCD_RS_PIN,OUTPUT);
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	61 e0       	ldi	r22, 0x01	; 1
    2746:	41 e0       	ldi	r20, 0x01	; 1
    2748:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	62 e0       	ldi	r22, 0x02	; 2
    2750:	41 e0       	ldi	r20, 0x01	; 1
    2752:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	//set direction D4 .. D7
	M_Dio_void_setPinDir(LCD_D7_PORT,LCD_D7_PIN,OUTPUT);
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	66 e0       	ldi	r22, 0x06	; 6
    275a:	41 e0       	ldi	r20, 0x01	; 1
    275c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(LCD_D6_PORT,LCD_D6_PIN,OUTPUT);
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	65 e0       	ldi	r22, 0x05	; 5
    2764:	41 e0       	ldi	r20, 0x01	; 1
    2766:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(LCD_D5_PORT,LCD_D5_PIN,OUTPUT);
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	64 e0       	ldi	r22, 0x04	; 4
    276e:	41 e0       	ldi	r20, 0x01	; 1
    2770:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(LCD_D4_PORT,LCD_D4_PIN,OUTPUT);
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	63 e0       	ldi	r22, 0x03	; 3
    2778:	41 e0       	ldi	r20, 0x01	; 1
    277a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	ac e0       	ldi	r26, 0x0C	; 12
    2784:	b2 e4       	ldi	r27, 0x42	; 66
    2786:	8f a3       	std	Y+39, r24	; 0x27
    2788:	98 a7       	std	Y+40, r25	; 0x28
    278a:	a9 a7       	std	Y+41, r26	; 0x29
    278c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278e:	6f a1       	ldd	r22, Y+39	; 0x27
    2790:	78 a5       	ldd	r23, Y+40	; 0x28
    2792:	89 a5       	ldd	r24, Y+41	; 0x29
    2794:	9a a5       	ldd	r25, Y+42	; 0x2a
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	4a e7       	ldi	r20, 0x7A	; 122
    279c:	53 e4       	ldi	r21, 0x43	; 67
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	8b a3       	std	Y+35, r24	; 0x23
    27a8:	9c a3       	std	Y+36, r25	; 0x24
    27aa:	ad a3       	std	Y+37, r26	; 0x25
    27ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27ae:	6b a1       	ldd	r22, Y+35	; 0x23
    27b0:	7c a1       	ldd	r23, Y+36	; 0x24
    27b2:	8d a1       	ldd	r24, Y+37	; 0x25
    27b4:	9e a1       	ldd	r25, Y+38	; 0x26
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e8       	ldi	r20, 0x80	; 128
    27bc:	5f e3       	ldi	r21, 0x3F	; 63
    27be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c2:	88 23       	and	r24, r24
    27c4:	2c f4       	brge	.+10     	; 0x27d0 <H_LCD_void_Init+0xa2>
		__ticks = 1;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	9a a3       	std	Y+34, r25	; 0x22
    27cc:	89 a3       	std	Y+33, r24	; 0x21
    27ce:	3f c0       	rjmp	.+126    	; 0x284e <H_LCD_void_Init+0x120>
	else if (__tmp > 65535)
    27d0:	6b a1       	ldd	r22, Y+35	; 0x23
    27d2:	7c a1       	ldd	r23, Y+36	; 0x24
    27d4:	8d a1       	ldd	r24, Y+37	; 0x25
    27d6:	9e a1       	ldd	r25, Y+38	; 0x26
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	3f ef       	ldi	r19, 0xFF	; 255
    27dc:	4f e7       	ldi	r20, 0x7F	; 127
    27de:	57 e4       	ldi	r21, 0x47	; 71
    27e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e4:	18 16       	cp	r1, r24
    27e6:	4c f5       	brge	.+82     	; 0x283a <H_LCD_void_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e8:	6f a1       	ldd	r22, Y+39	; 0x27
    27ea:	78 a5       	ldd	r23, Y+40	; 0x28
    27ec:	89 a5       	ldd	r24, Y+41	; 0x29
    27ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e2       	ldi	r20, 0x20	; 32
    27f6:	51 e4       	ldi	r21, 0x41	; 65
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9a a3       	std	Y+34, r25	; 0x22
    280e:	89 a3       	std	Y+33, r24	; 0x21
    2810:	0f c0       	rjmp	.+30     	; 0x2830 <H_LCD_void_Init+0x102>
    2812:	89 e1       	ldi	r24, 0x19	; 25
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	98 a3       	std	Y+32, r25	; 0x20
    2818:	8f 8f       	std	Y+31, r24	; 0x1f
    281a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    281c:	98 a1       	ldd	r25, Y+32	; 0x20
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <H_LCD_void_Init+0xf0>
    2822:	98 a3       	std	Y+32, r25	; 0x20
    2824:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2826:	89 a1       	ldd	r24, Y+33	; 0x21
    2828:	9a a1       	ldd	r25, Y+34	; 0x22
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	9a a3       	std	Y+34, r25	; 0x22
    282e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2830:	89 a1       	ldd	r24, Y+33	; 0x21
    2832:	9a a1       	ldd	r25, Y+34	; 0x22
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	69 f7       	brne	.-38     	; 0x2812 <H_LCD_void_Init+0xe4>
    2838:	14 c0       	rjmp	.+40     	; 0x2862 <H_LCD_void_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283a:	6b a1       	ldd	r22, Y+35	; 0x23
    283c:	7c a1       	ldd	r23, Y+36	; 0x24
    283e:	8d a1       	ldd	r24, Y+37	; 0x25
    2840:	9e a1       	ldd	r25, Y+38	; 0x26
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9a a3       	std	Y+34, r25	; 0x22
    284c:	89 a3       	std	Y+33, r24	; 0x21
    284e:	89 a1       	ldd	r24, Y+33	; 0x21
    2850:	9a a1       	ldd	r25, Y+34	; 0x22
    2852:	9e 8f       	std	Y+30, r25	; 0x1e
    2854:	8d 8f       	std	Y+29, r24	; 0x1d
    2856:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2858:	9e 8d       	ldd	r25, Y+30	; 0x1e
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <H_LCD_void_Init+0x12c>
    285e:	9e 8f       	std	Y+30, r25	; 0x1e
    2860:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_8BIT_MODE_2LINES_5X7);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
	_delay_ms(35);
	// Rs = command = 0
	M_Dio_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	61 e0       	ldi	r22, 0x01	; 1
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
	// EN = 0 disabled
	M_Dio_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	62 e0       	ldi	r22, 0x02	; 2
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
	// prepare data
	M_Dio_void_setPinValue(LCD_D7_PORT,LCD_D7_PIN,0);
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	66 e0       	ldi	r22, 0x06	; 6
    287a:	40 e0       	ldi	r20, 0x00	; 0
    287c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D6_PORT,LCD_D6_PIN,0);
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	65 e0       	ldi	r22, 0x05	; 5
    2884:	40 e0       	ldi	r20, 0x00	; 0
    2886:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D5_PORT,LCD_D5_PIN,1);
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	64 e0       	ldi	r22, 0x04	; 4
    288e:	41 e0       	ldi	r20, 0x01	; 1
    2890:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D4_PORT,LCD_D4_PIN,0);
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	63 e0       	ldi	r22, 0x03	; 3
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
	//EN = 1
	M_Dio_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	62 e0       	ldi	r22, 0x02	; 2
    28a2:	41 e0       	ldi	r20, 0x01	; 1
    28a4:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	a0 e8       	ldi	r26, 0x80	; 128
    28ae:	bf e3       	ldi	r27, 0x3F	; 63
    28b0:	89 8f       	std	Y+25, r24	; 0x19
    28b2:	9a 8f       	std	Y+26, r25	; 0x1a
    28b4:	ab 8f       	std	Y+27, r26	; 0x1b
    28b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b8:	69 8d       	ldd	r22, Y+25	; 0x19
    28ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	4a e7       	ldi	r20, 0x7A	; 122
    28c6:	53 e4       	ldi	r21, 0x43	; 67
    28c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	8d 8b       	std	Y+21, r24	; 0x15
    28d2:	9e 8b       	std	Y+22, r25	; 0x16
    28d4:	af 8b       	std	Y+23, r26	; 0x17
    28d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28d8:	6d 89       	ldd	r22, Y+21	; 0x15
    28da:	7e 89       	ldd	r23, Y+22	; 0x16
    28dc:	8f 89       	ldd	r24, Y+23	; 0x17
    28de:	98 8d       	ldd	r25, Y+24	; 0x18
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e8       	ldi	r20, 0x80	; 128
    28e6:	5f e3       	ldi	r21, 0x3F	; 63
    28e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ec:	88 23       	and	r24, r24
    28ee:	2c f4       	brge	.+10     	; 0x28fa <H_LCD_void_Init+0x1cc>
		__ticks = 1;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	9c 8b       	std	Y+20, r25	; 0x14
    28f6:	8b 8b       	std	Y+19, r24	; 0x13
    28f8:	3f c0       	rjmp	.+126    	; 0x2978 <H_LCD_void_Init+0x24a>
	else if (__tmp > 65535)
    28fa:	6d 89       	ldd	r22, Y+21	; 0x15
    28fc:	7e 89       	ldd	r23, Y+22	; 0x16
    28fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2900:	98 8d       	ldd	r25, Y+24	; 0x18
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	3f ef       	ldi	r19, 0xFF	; 255
    2906:	4f e7       	ldi	r20, 0x7F	; 127
    2908:	57 e4       	ldi	r21, 0x47	; 71
    290a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    290e:	18 16       	cp	r1, r24
    2910:	4c f5       	brge	.+82     	; 0x2964 <H_LCD_void_Init+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2912:	69 8d       	ldd	r22, Y+25	; 0x19
    2914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e2       	ldi	r20, 0x20	; 32
    2920:	51 e4       	ldi	r21, 0x41	; 65
    2922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	bc 01       	movw	r22, r24
    292c:	cd 01       	movw	r24, r26
    292e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	9c 8b       	std	Y+20, r25	; 0x14
    2938:	8b 8b       	std	Y+19, r24	; 0x13
    293a:	0f c0       	rjmp	.+30     	; 0x295a <H_LCD_void_Init+0x22c>
    293c:	89 e1       	ldi	r24, 0x19	; 25
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9a 8b       	std	Y+18, r25	; 0x12
    2942:	89 8b       	std	Y+17, r24	; 0x11
    2944:	89 89       	ldd	r24, Y+17	; 0x11
    2946:	9a 89       	ldd	r25, Y+18	; 0x12
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <H_LCD_void_Init+0x21a>
    294c:	9a 8b       	std	Y+18, r25	; 0x12
    294e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2950:	8b 89       	ldd	r24, Y+19	; 0x13
    2952:	9c 89       	ldd	r25, Y+20	; 0x14
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	9c 8b       	std	Y+20, r25	; 0x14
    2958:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295a:	8b 89       	ldd	r24, Y+19	; 0x13
    295c:	9c 89       	ldd	r25, Y+20	; 0x14
    295e:	00 97       	sbiw	r24, 0x00	; 0
    2960:	69 f7       	brne	.-38     	; 0x293c <H_LCD_void_Init+0x20e>
    2962:	14 c0       	rjmp	.+40     	; 0x298c <H_LCD_void_Init+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2964:	6d 89       	ldd	r22, Y+21	; 0x15
    2966:	7e 89       	ldd	r23, Y+22	; 0x16
    2968:	8f 89       	ldd	r24, Y+23	; 0x17
    296a:	98 8d       	ldd	r25, Y+24	; 0x18
    296c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	9c 8b       	std	Y+20, r25	; 0x14
    2976:	8b 8b       	std	Y+19, r24	; 0x13
    2978:	8b 89       	ldd	r24, Y+19	; 0x13
    297a:	9c 89       	ldd	r25, Y+20	; 0x14
    297c:	98 8b       	std	Y+16, r25	; 0x10
    297e:	8f 87       	std	Y+15, r24	; 0x0f
    2980:	8f 85       	ldd	r24, Y+15	; 0x0f
    2982:	98 89       	ldd	r25, Y+16	; 0x10
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	f1 f7       	brne	.-4      	; 0x2984 <H_LCD_void_Init+0x256>
    2988:	98 8b       	std	Y+16, r25	; 0x10
    298a:	8f 87       	std	Y+15, r24	; 0x0f
	// delay 1 msec (to allow latching)
	_delay_ms(1);
	// EN = 0
	M_Dio_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	62 e0       	ldi	r22, 0x02	; 2
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	a0 ea       	ldi	r26, 0xA0	; 160
    299c:	b0 e4       	ldi	r27, 0x40	; 64
    299e:	8b 87       	std	Y+11, r24	; 0x0b
    29a0:	9c 87       	std	Y+12, r25	; 0x0c
    29a2:	ad 87       	std	Y+13, r26	; 0x0d
    29a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	4a e7       	ldi	r20, 0x7A	; 122
    29b4:	53 e4       	ldi	r21, 0x43	; 67
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	8f 83       	std	Y+7, r24	; 0x07
    29c0:	98 87       	std	Y+8, r25	; 0x08
    29c2:	a9 87       	std	Y+9, r26	; 0x09
    29c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29c6:	6f 81       	ldd	r22, Y+7	; 0x07
    29c8:	78 85       	ldd	r23, Y+8	; 0x08
    29ca:	89 85       	ldd	r24, Y+9	; 0x09
    29cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e8       	ldi	r20, 0x80	; 128
    29d4:	5f e3       	ldi	r21, 0x3F	; 63
    29d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29da:	88 23       	and	r24, r24
    29dc:	2c f4       	brge	.+10     	; 0x29e8 <H_LCD_void_Init+0x2ba>
		__ticks = 1;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	8d 83       	std	Y+5, r24	; 0x05
    29e6:	3f c0       	rjmp	.+126    	; 0x2a66 <H_LCD_void_Init+0x338>
	else if (__tmp > 65535)
    29e8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ea:	78 85       	ldd	r23, Y+8	; 0x08
    29ec:	89 85       	ldd	r24, Y+9	; 0x09
    29ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	3f ef       	ldi	r19, 0xFF	; 255
    29f4:	4f e7       	ldi	r20, 0x7F	; 127
    29f6:	57 e4       	ldi	r21, 0x47	; 71
    29f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fc:	18 16       	cp	r1, r24
    29fe:	4c f5       	brge	.+82     	; 0x2a52 <H_LCD_void_Init+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e2       	ldi	r20, 0x20	; 32
    2a0e:	51 e4       	ldi	r21, 0x41	; 65
    2a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9e 83       	std	Y+6, r25	; 0x06
    2a26:	8d 83       	std	Y+5, r24	; 0x05
    2a28:	0f c0       	rjmp	.+30     	; 0x2a48 <H_LCD_void_Init+0x31a>
    2a2a:	89 e1       	ldi	r24, 0x19	; 25
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	9c 83       	std	Y+4, r25	; 0x04
    2a30:	8b 83       	std	Y+3, r24	; 0x03
    2a32:	8b 81       	ldd	r24, Y+3	; 0x03
    2a34:	9c 81       	ldd	r25, Y+4	; 0x04
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <H_LCD_void_Init+0x308>
    2a3a:	9c 83       	std	Y+4, r25	; 0x04
    2a3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a40:	9e 81       	ldd	r25, Y+6	; 0x06
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	9e 83       	std	Y+6, r25	; 0x06
    2a46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a48:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4c:	00 97       	sbiw	r24, 0x00	; 0
    2a4e:	69 f7       	brne	.-38     	; 0x2a2a <H_LCD_void_Init+0x2fc>
    2a50:	14 c0       	rjmp	.+40     	; 0x2a7a <H_LCD_void_Init+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a52:	6f 81       	ldd	r22, Y+7	; 0x07
    2a54:	78 85       	ldd	r23, Y+8	; 0x08
    2a56:	89 85       	ldd	r24, Y+9	; 0x09
    2a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	9e 83       	std	Y+6, r25	; 0x06
    2a64:	8d 83       	std	Y+5, r24	; 0x05
    2a66:	8d 81       	ldd	r24, Y+5	; 0x05
    2a68:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	9a 81       	ldd	r25, Y+2	; 0x02
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <H_LCD_void_Init+0x344>
    2a76:	9a 83       	std	Y+2, r25	; 0x02
    2a78:	89 83       	std	Y+1, r24	; 0x01
	// delay to allow processing
	_delay_ms(5);
	H_LCD_void_sendCommand(LCD_4BIT_MODE_2LINES_5X7);
    2a7a:	88 e2       	ldi	r24, 0x28	; 40
    2a7c:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendCommand>
#else
  #error("wrong LCD Mode")
#endif
	// display ON/OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURSON_BLINKOFF);
    2a80:	8e e0       	ldi	r24, 0x0E	; 14
    2a82:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendCommand>
	// display Clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendCommand>
	// Entry Mode Set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
    2a8c:	86 e0       	ldi	r24, 0x06	; 6
    2a8e:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendCommand>

}
    2a92:	aa 96       	adiw	r28, 0x2a	; 42
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	0f be       	out	0x3f, r0	; 63
    2a9c:	cd bf       	out	0x3d, r28	; 61
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	0f 92       	push	r0
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	89 83       	std	Y+1, r24	; 0x01
  // step 1 : select RS to be in data mode (RS = 1)
   M_Dio_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	61 e0       	ldi	r22, 0x01	; 1
    2ab4:	41 e0       	ldi	r20, 0x01	; 1
    2ab6:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
  // step 2 : write data
   H_LCD_void_writeNlatch(copy_u8data);
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <H_LCD_void_writeNlatch>
}
    2ac0:	0f 90       	pop	r0
    2ac2:	cf 91       	pop	r28
    2ac4:	df 91       	pop	r29
    2ac6:	08 95       	ret

00002ac8 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8Command)
{
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	0f 92       	push	r0
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
    2ad2:	89 83       	std	Y+1, r24	; 0x01
	// step 1 : select RS to be in command mode (RS = 0)
	M_Dio_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	61 e0       	ldi	r22, 0x01	; 1
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
	// step 2 : write command
	H_LCD_void_writeNlatch(copy_u8Command);
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <H_LCD_void_writeNlatch>

}
    2ae4:	0f 90       	pop	r0
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <H_LCD_void_sendString>:
void H_LCD_void_sendString(const s8 * pstr)
{
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	00 d0       	rcall	.+0      	; 0x2af2 <H_LCD_void_sendString+0x6>
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	9a 83       	std	Y+2, r25	; 0x02
    2af8:	89 83       	std	Y+1, r24	; 0x01
    2afa:	0a c0       	rjmp	.+20     	; 0x2b10 <H_LCD_void_sendString+0x24>
   while(*pstr)
   {
	   H_LCD_void_sendData(*pstr);
    2afc:	e9 81       	ldd	r30, Y+1	; 0x01
    2afe:	fa 81       	ldd	r31, Y+2	; 0x02
    2b00:	80 81       	ld	r24, Z
    2b02:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <H_LCD_void_sendData>
	   pstr++;
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0a:	01 96       	adiw	r24, 0x01	; 1
    2b0c:	9a 83       	std	Y+2, r25	; 0x02
    2b0e:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_writeNlatch(copy_u8Command);

}
void H_LCD_void_sendString(const s8 * pstr)
{
   while(*pstr)
    2b10:	e9 81       	ldd	r30, Y+1	; 0x01
    2b12:	fa 81       	ldd	r31, Y+2	; 0x02
    2b14:	80 81       	ld	r24, Z
    2b16:	88 23       	and	r24, r24
    2b18:	89 f7       	brne	.-30     	; 0x2afc <H_LCD_void_sendString+0x10>
   {
	   H_LCD_void_sendData(*pstr);
	   pstr++;
   }
}
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	cf 91       	pop	r28
    2b20:	df 91       	pop	r29
    2b22:	08 95       	ret

00002b24 <H_LCD_void_clear>:
void H_LCD_void_clear(void)
{
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendCommand>
}
    2b32:	cf 91       	pop	r28
    2b34:	df 91       	pop	r29
    2b36:	08 95       	ret

00002b38 <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    2b38:	0f 93       	push	r16
    2b3a:	1f 93       	push	r17
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	2f 97       	sbiw	r28, 0x0f	; 15
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	6c 87       	std	Y+12, r22	; 0x0c
    2b52:	7d 87       	std	Y+13, r23	; 0x0d
    2b54:	8e 87       	std	Y+14, r24	; 0x0e
    2b56:	9f 87       	std	Y+15, r25	; 0x0f
   u8 Loc_Arr[10]= {0};
    2b58:	8a e0       	ldi	r24, 0x0A	; 10
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	32 96       	adiw	r30, 0x02	; 2
    2b5e:	df 01       	movw	r26, r30
    2b60:	98 2f       	mov	r25, r24
    2b62:	1d 92       	st	X+, r1
    2b64:	9a 95       	dec	r25
    2b66:	e9 f7       	brne	.-6      	; 0x2b62 <H_LCD_void_sendIntNum+0x2a>
   s8 i = 0;
    2b68:	19 82       	std	Y+1, r1	; 0x01
   if(copy_s32Num == 0)
    2b6a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b6c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b6e:	ae 85       	ldd	r26, Y+14	; 0x0e
    2b70:	bf 85       	ldd	r27, Y+15	; 0x0f
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	a1 05       	cpc	r26, r1
    2b76:	b1 05       	cpc	r27, r1
    2b78:	21 f4       	brne	.+8      	; 0x2b82 <H_LCD_void_sendIntNum+0x4a>
   {
	   H_LCD_void_sendData('0');
    2b7a:	80 e3       	ldi	r24, 0x30	; 48
    2b7c:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <H_LCD_void_sendData>
    2b80:	69 c0       	rjmp	.+210    	; 0x2c54 <H_LCD_void_sendIntNum+0x11c>
	   return ;
   }
   else if(copy_s32Num < 0)//negative
    2b82:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b84:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b86:	ae 85       	ldd	r26, Y+14	; 0x0e
    2b88:	bf 85       	ldd	r27, Y+15	; 0x0f
    2b8a:	bb 23       	and	r27, r27
    2b8c:	0c f0       	brlt	.+2      	; 0x2b90 <H_LCD_void_sendIntNum+0x58>
    2b8e:	42 c0       	rjmp	.+132    	; 0x2c14 <H_LCD_void_sendIntNum+0xdc>
   {
	   H_LCD_void_sendData('-');
    2b90:	8d e2       	ldi	r24, 0x2D	; 45
    2b92:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <H_LCD_void_sendData>
	   copy_s32Num *= -1;
    2b96:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b98:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b9a:	ae 85       	ldd	r26, Y+14	; 0x0e
    2b9c:	bf 85       	ldd	r27, Y+15	; 0x0f
    2b9e:	b0 95       	com	r27
    2ba0:	a0 95       	com	r26
    2ba2:	90 95       	com	r25
    2ba4:	81 95       	neg	r24
    2ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba8:	af 4f       	sbci	r26, 0xFF	; 255
    2baa:	bf 4f       	sbci	r27, 0xFF	; 255
    2bac:	8c 87       	std	Y+12, r24	; 0x0c
    2bae:	9d 87       	std	Y+13, r25	; 0x0d
    2bb0:	ae 87       	std	Y+14, r26	; 0x0e
    2bb2:	bf 87       	std	Y+15, r27	; 0x0f
    2bb4:	2f c0       	rjmp	.+94     	; 0x2c14 <H_LCD_void_sendIntNum+0xdc>
   }
   while(copy_s32Num != 0)
   {
	   Loc_Arr[i] = copy_s32Num % 10;
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	08 2f       	mov	r16, r24
    2bba:	11 27       	eor	r17, r17
    2bbc:	07 fd       	sbrc	r16, 7
    2bbe:	10 95       	com	r17
    2bc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bc4:	ae 85       	ldd	r26, Y+14	; 0x0e
    2bc6:	bf 85       	ldd	r27, Y+15	; 0x0f
    2bc8:	2a e0       	ldi	r18, 0x0A	; 10
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	40 e0       	ldi	r20, 0x00	; 0
    2bce:	50 e0       	ldi	r21, 0x00	; 0
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	cd 01       	movw	r24, r26
    2bd4:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__divmodsi4>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	28 2f       	mov	r18, r24
    2bde:	ce 01       	movw	r24, r28
    2be0:	02 96       	adiw	r24, 0x02	; 2
    2be2:	fc 01       	movw	r30, r24
    2be4:	e0 0f       	add	r30, r16
    2be6:	f1 1f       	adc	r31, r17
    2be8:	20 83       	st	Z, r18
	   copy_s32Num = copy_s32Num /10 ;
    2bea:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bec:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bee:	ae 85       	ldd	r26, Y+14	; 0x0e
    2bf0:	bf 85       	ldd	r27, Y+15	; 0x0f
    2bf2:	2a e0       	ldi	r18, 0x0A	; 10
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	50 e0       	ldi	r21, 0x00	; 0
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__divmodsi4>
    2c02:	da 01       	movw	r26, r20
    2c04:	c9 01       	movw	r24, r18
    2c06:	8c 87       	std	Y+12, r24	; 0x0c
    2c08:	9d 87       	std	Y+13, r25	; 0x0d
    2c0a:	ae 87       	std	Y+14, r26	; 0x0e
    2c0c:	bf 87       	std	Y+15, r27	; 0x0f
	   i++;
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	89 83       	std	Y+1, r24	; 0x01
   else if(copy_s32Num < 0)//negative
   {
	   H_LCD_void_sendData('-');
	   copy_s32Num *= -1;
   }
   while(copy_s32Num != 0)
    2c14:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c16:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c18:	ae 85       	ldd	r26, Y+14	; 0x0e
    2c1a:	bf 85       	ldd	r27, Y+15	; 0x0f
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	a1 05       	cpc	r26, r1
    2c20:	b1 05       	cpc	r27, r1
    2c22:	49 f6       	brne	.-110    	; 0x2bb6 <H_LCD_void_sendIntNum+0x7e>
   {
	   Loc_Arr[i] = copy_s32Num % 10;
	   copy_s32Num = copy_s32Num /10 ;
	   i++;
   }
   i--;
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	81 50       	subi	r24, 0x01	; 1
    2c28:	89 83       	std	Y+1, r24	; 0x01
    2c2a:	11 c0       	rjmp	.+34     	; 0x2c4e <H_LCD_void_sendIntNum+0x116>
   while(i>=0)
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	28 2f       	mov	r18, r24
    2c30:	33 27       	eor	r19, r19
    2c32:	27 fd       	sbrc	r18, 7
    2c34:	30 95       	com	r19
    2c36:	ce 01       	movw	r24, r28
    2c38:	02 96       	adiw	r24, 0x02	; 2
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	e2 0f       	add	r30, r18
    2c3e:	f3 1f       	adc	r31, r19
    2c40:	80 81       	ld	r24, Z
    2c42:	80 5d       	subi	r24, 0xD0	; 208
    2c44:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <H_LCD_void_sendData>
	   i--;
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	81 50       	subi	r24, 0x01	; 1
    2c4c:	89 83       	std	Y+1, r24	; 0x01
	   Loc_Arr[i] = copy_s32Num % 10;
	   copy_s32Num = copy_s32Num /10 ;
	   i++;
   }
   i--;
   while(i>=0)
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	88 23       	and	r24, r24
    2c52:	64 f7       	brge	.-40     	; 0x2c2c <H_LCD_void_sendIntNum+0xf4>
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
	   i--;
   }
}
    2c54:	2f 96       	adiw	r28, 0x0f	; 15
    2c56:	0f b6       	in	r0, 0x3f	; 63
    2c58:	f8 94       	cli
    2c5a:	de bf       	out	0x3e, r29	; 62
    2c5c:	0f be       	out	0x3f, r0	; 63
    2c5e:	cd bf       	out	0x3d, r28	; 61
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	1f 91       	pop	r17
    2c66:	0f 91       	pop	r16
    2c68:	08 95       	ret

00002c6a <H_LCD_void_gotXY>:
void H_LCD_void_gotXY(u8 copy_u8Row,u8 copy_u8Col)
{
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	00 d0       	rcall	.+0      	; 0x2c70 <H_LCD_void_gotXY+0x6>
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <H_LCD_void_gotXY+0x8>
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	6a 83       	std	Y+2, r22	; 0x02
  if(copy_u8Row == 0 || copy_u8Row == 1) //check on row
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	88 23       	and	r24, r24
    2c7e:	19 f0       	breq	.+6      	; 0x2c86 <H_LCD_void_gotXY+0x1c>
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	81 30       	cpi	r24, 0x01	; 1
    2c84:	d9 f4       	brne	.+54     	; 0x2cbc <H_LCD_void_gotXY+0x52>
  {
	  if(copy_u8Col >= 0 && copy_u8Col <= 15)// check on col
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	80 31       	cpi	r24, 0x10	; 16
    2c8a:	c0 f4       	brcc	.+48     	; 0x2cbc <H_LCD_void_gotXY+0x52>
	  {
          switch(copy_u8Row)
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	28 2f       	mov	r18, r24
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	3c 83       	std	Y+4, r19	; 0x04
    2c94:	2b 83       	std	Y+3, r18	; 0x03
    2c96:	8b 81       	ldd	r24, Y+3	; 0x03
    2c98:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	31 f0       	breq	.+12     	; 0x2caa <H_LCD_void_gotXY+0x40>
    2c9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2ca0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ca2:	21 30       	cpi	r18, 0x01	; 1
    2ca4:	31 05       	cpc	r19, r1
    2ca6:	31 f0       	breq	.+12     	; 0x2cb4 <H_LCD_void_gotXY+0x4a>
    2ca8:	09 c0       	rjmp	.+18     	; 0x2cbc <H_LCD_void_gotXY+0x52>
          {
          case 0 :
        	  H_LCD_void_sendCommand(LCD_SET_R0C0_ + copy_u8Col);
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	80 58       	subi	r24, 0x80	; 128
    2cae:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendCommand>
    2cb2:	04 c0       	rjmp	.+8      	; 0x2cbc <H_LCD_void_gotXY+0x52>
        	  break;
          case 1 :
        	  H_LCD_void_sendCommand(LCD_SET_R1C0_ + copy_u8Col);
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	80 54       	subi	r24, 0x40	; 64
    2cb8:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendCommand>
        	  break;
          }
	  }
  }
}
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	cf 91       	pop	r28
    2cc6:	df 91       	pop	r29
    2cc8:	08 95       	ret

00002cca <H_LCD_void_creatCustomChar>:
void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    2cca:	df 93       	push	r29
    2ccc:	cf 93       	push	r28
    2cce:	00 d0       	rcall	.+0      	; 0x2cd0 <H_LCD_void_creatCustomChar+0x6>
    2cd0:	0f 92       	push	r0
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	9a 83       	std	Y+2, r25	; 0x02
    2cd8:	89 83       	std	Y+1, r24	; 0x01
    2cda:	6b 83       	std	Y+3, r22	; 0x03

}
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	08 95       	ret

00002ce8 <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	0f 92       	push	r0
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	89 83       	std	Y+1, r24	; 0x01

}
    2cf4:	0f 90       	pop	r0
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	08 95       	ret

00002cfc <H_LCD_void_writeNlatch>:
static void H_LCD_void_writeNlatch(u8 copy_u8Byte)
{
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	e9 97       	sbiw	r28, 0x39	; 57
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	89 af       	std	Y+57, r24	; 0x39
 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
  // step 5 : delay to allow LCD to process
 	_delay_ms(5);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
 	// EN = 0 disabled
 	M_Dio_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	62 e0       	ldi	r22, 0x02	; 2
    2d16:	40 e0       	ldi	r20, 0x00	; 0
    2d18:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
 	// devide Byte to 2 (4 bits )
 	// step 1 :send high order bits on pins (D7 .. D4)
 	M_Dio_void_setPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,4));
    2d1c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d1e:	82 95       	swap	r24
    2d20:	8f 70       	andi	r24, 0x0F	; 15
    2d22:	98 2f       	mov	r25, r24
    2d24:	91 70       	andi	r25, 0x01	; 1
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	63 e0       	ldi	r22, 0x03	; 3
    2d2a:	49 2f       	mov	r20, r25
    2d2c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
 	M_Dio_void_setPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,5));
    2d30:	89 ad       	ldd	r24, Y+57	; 0x39
    2d32:	82 95       	swap	r24
    2d34:	86 95       	lsr	r24
    2d36:	87 70       	andi	r24, 0x07	; 7
    2d38:	98 2f       	mov	r25, r24
    2d3a:	91 70       	andi	r25, 0x01	; 1
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	64 e0       	ldi	r22, 0x04	; 4
    2d40:	49 2f       	mov	r20, r25
    2d42:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
 	M_Dio_void_setPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,6));
    2d46:	89 ad       	ldd	r24, Y+57	; 0x39
    2d48:	82 95       	swap	r24
    2d4a:	86 95       	lsr	r24
    2d4c:	86 95       	lsr	r24
    2d4e:	83 70       	andi	r24, 0x03	; 3
    2d50:	98 2f       	mov	r25, r24
    2d52:	91 70       	andi	r25, 0x01	; 1
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	65 e0       	ldi	r22, 0x05	; 5
    2d58:	49 2f       	mov	r20, r25
    2d5a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
 	M_Dio_void_setPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,7));
    2d5e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d60:	98 2f       	mov	r25, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	99 27       	eor	r25, r25
    2d66:	99 1f       	adc	r25, r25
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	66 e0       	ldi	r22, 0x06	; 6
    2d6c:	49 2f       	mov	r20, r25
    2d6e:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
 	  //step 2 : Activate Enable ,( E = 1)
 	 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	62 e0       	ldi	r22, 0x02	; 2
    2d76:	41 e0       	ldi	r20, 0x01	; 1
    2d78:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	a0 e8       	ldi	r26, 0x80	; 128
    2d82:	bf e3       	ldi	r27, 0x3F	; 63
    2d84:	8d ab       	std	Y+53, r24	; 0x35
    2d86:	9e ab       	std	Y+54, r25	; 0x36
    2d88:	af ab       	std	Y+55, r26	; 0x37
    2d8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8c:	6d a9       	ldd	r22, Y+53	; 0x35
    2d8e:	7e a9       	ldd	r23, Y+54	; 0x36
    2d90:	8f a9       	ldd	r24, Y+55	; 0x37
    2d92:	98 ad       	ldd	r25, Y+56	; 0x38
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	4a e7       	ldi	r20, 0x7A	; 122
    2d9a:	53 e4       	ldi	r21, 0x43	; 67
    2d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	89 ab       	std	Y+49, r24	; 0x31
    2da6:	9a ab       	std	Y+50, r25	; 0x32
    2da8:	ab ab       	std	Y+51, r26	; 0x33
    2daa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dac:	69 a9       	ldd	r22, Y+49	; 0x31
    2dae:	7a a9       	ldd	r23, Y+50	; 0x32
    2db0:	8b a9       	ldd	r24, Y+51	; 0x33
    2db2:	9c a9       	ldd	r25, Y+52	; 0x34
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e8       	ldi	r20, 0x80	; 128
    2dba:	5f e3       	ldi	r21, 0x3F	; 63
    2dbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc0:	88 23       	and	r24, r24
    2dc2:	2c f4       	brge	.+10     	; 0x2dce <H_LCD_void_writeNlatch+0xd2>
		__ticks = 1;
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	98 ab       	std	Y+48, r25	; 0x30
    2dca:	8f a7       	std	Y+47, r24	; 0x2f
    2dcc:	3f c0       	rjmp	.+126    	; 0x2e4c <H_LCD_void_writeNlatch+0x150>
	else if (__tmp > 65535)
    2dce:	69 a9       	ldd	r22, Y+49	; 0x31
    2dd0:	7a a9       	ldd	r23, Y+50	; 0x32
    2dd2:	8b a9       	ldd	r24, Y+51	; 0x33
    2dd4:	9c a9       	ldd	r25, Y+52	; 0x34
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	3f ef       	ldi	r19, 0xFF	; 255
    2dda:	4f e7       	ldi	r20, 0x7F	; 127
    2ddc:	57 e4       	ldi	r21, 0x47	; 71
    2dde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2de2:	18 16       	cp	r1, r24
    2de4:	4c f5       	brge	.+82     	; 0x2e38 <H_LCD_void_writeNlatch+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de6:	6d a9       	ldd	r22, Y+53	; 0x35
    2de8:	7e a9       	ldd	r23, Y+54	; 0x36
    2dea:	8f a9       	ldd	r24, Y+55	; 0x37
    2dec:	98 ad       	ldd	r25, Y+56	; 0x38
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e2       	ldi	r20, 0x20	; 32
    2df4:	51 e4       	ldi	r21, 0x41	; 65
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	bc 01       	movw	r22, r24
    2e00:	cd 01       	movw	r24, r26
    2e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	98 ab       	std	Y+48, r25	; 0x30
    2e0c:	8f a7       	std	Y+47, r24	; 0x2f
    2e0e:	0f c0       	rjmp	.+30     	; 0x2e2e <H_LCD_void_writeNlatch+0x132>
    2e10:	89 e1       	ldi	r24, 0x19	; 25
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	9e a7       	std	Y+46, r25	; 0x2e
    2e16:	8d a7       	std	Y+45, r24	; 0x2d
    2e18:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <H_LCD_void_writeNlatch+0x120>
    2e20:	9e a7       	std	Y+46, r25	; 0x2e
    2e22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e26:	98 a9       	ldd	r25, Y+48	; 0x30
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	98 ab       	std	Y+48, r25	; 0x30
    2e2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e30:	98 a9       	ldd	r25, Y+48	; 0x30
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	69 f7       	brne	.-38     	; 0x2e10 <H_LCD_void_writeNlatch+0x114>
    2e36:	14 c0       	rjmp	.+40     	; 0x2e60 <H_LCD_void_writeNlatch+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e38:	69 a9       	ldd	r22, Y+49	; 0x31
    2e3a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e3c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e3e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	98 ab       	std	Y+48, r25	; 0x30
    2e4a:	8f a7       	std	Y+47, r24	; 0x2f
    2e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e50:	9c a7       	std	Y+44, r25	; 0x2c
    2e52:	8b a7       	std	Y+43, r24	; 0x2b
    2e54:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e56:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <H_LCD_void_writeNlatch+0x15c>
    2e5c:	9c a7       	std	Y+44, r25	; 0x2c
    2e5e:	8b a7       	std	Y+43, r24	; 0x2b
 	  // step 3 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 	  // step 4 : deactivate Enable (E = 0)
 	 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	62 e0       	ldi	r22, 0x02	; 2
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	a0 ea       	ldi	r26, 0xA0	; 160
    2e70:	b0 e4       	ldi	r27, 0x40	; 64
    2e72:	8f a3       	std	Y+39, r24	; 0x27
    2e74:	98 a7       	std	Y+40, r25	; 0x28
    2e76:	a9 a7       	std	Y+41, r26	; 0x29
    2e78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e7c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e7e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e80:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	4a e7       	ldi	r20, 0x7A	; 122
    2e88:	53 e4       	ldi	r21, 0x43	; 67
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	8b a3       	std	Y+35, r24	; 0x23
    2e94:	9c a3       	std	Y+36, r25	; 0x24
    2e96:	ad a3       	std	Y+37, r26	; 0x25
    2e98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e9a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e9c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e8       	ldi	r20, 0x80	; 128
    2ea8:	5f e3       	ldi	r21, 0x3F	; 63
    2eaa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eae:	88 23       	and	r24, r24
    2eb0:	2c f4       	brge	.+10     	; 0x2ebc <H_LCD_void_writeNlatch+0x1c0>
		__ticks = 1;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	9a a3       	std	Y+34, r25	; 0x22
    2eb8:	89 a3       	std	Y+33, r24	; 0x21
    2eba:	3f c0       	rjmp	.+126    	; 0x2f3a <H_LCD_void_writeNlatch+0x23e>
	else if (__tmp > 65535)
    2ebc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ebe:	7c a1       	ldd	r23, Y+36	; 0x24
    2ec0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ec2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	3f ef       	ldi	r19, 0xFF	; 255
    2ec8:	4f e7       	ldi	r20, 0x7F	; 127
    2eca:	57 e4       	ldi	r21, 0x47	; 71
    2ecc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed0:	18 16       	cp	r1, r24
    2ed2:	4c f5       	brge	.+82     	; 0x2f26 <H_LCD_void_writeNlatch+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ed6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ed8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eda:	9a a5       	ldd	r25, Y+42	; 0x2a
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e2       	ldi	r20, 0x20	; 32
    2ee2:	51 e4       	ldi	r21, 0x41	; 65
    2ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	9a a3       	std	Y+34, r25	; 0x22
    2efa:	89 a3       	std	Y+33, r24	; 0x21
    2efc:	0f c0       	rjmp	.+30     	; 0x2f1c <H_LCD_void_writeNlatch+0x220>
    2efe:	89 e1       	ldi	r24, 0x19	; 25
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	98 a3       	std	Y+32, r25	; 0x20
    2f04:	8f 8f       	std	Y+31, r24	; 0x1f
    2f06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f08:	98 a1       	ldd	r25, Y+32	; 0x20
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <H_LCD_void_writeNlatch+0x20e>
    2f0e:	98 a3       	std	Y+32, r25	; 0x20
    2f10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f12:	89 a1       	ldd	r24, Y+33	; 0x21
    2f14:	9a a1       	ldd	r25, Y+34	; 0x22
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	9a a3       	std	Y+34, r25	; 0x22
    2f1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	69 f7       	brne	.-38     	; 0x2efe <H_LCD_void_writeNlatch+0x202>
    2f24:	14 c0       	rjmp	.+40     	; 0x2f4e <H_LCD_void_writeNlatch+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f26:	6b a1       	ldd	r22, Y+35	; 0x23
    2f28:	7c a1       	ldd	r23, Y+36	; 0x24
    2f2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	9a a3       	std	Y+34, r25	; 0x22
    2f38:	89 a3       	std	Y+33, r24	; 0x21
    2f3a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f3c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f40:	8d 8f       	std	Y+29, r24	; 0x1d
    2f42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	f1 f7       	brne	.-4      	; 0x2f46 <H_LCD_void_writeNlatch+0x24a>
    2f4a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f4c:	8d 8f       	std	Y+29, r24	; 0x1d
 	  // step 5 : delay to allow LCD to process
 	 	_delay_ms(5);
 	 	// step 6 :send Low order bits on pins (D7 .. D4)
 	 	M_Dio_void_setPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,0));
    2f4e:	89 ad       	ldd	r24, Y+57	; 0x39
    2f50:	98 2f       	mov	r25, r24
    2f52:	91 70       	andi	r25, 0x01	; 1
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	63 e0       	ldi	r22, 0x03	; 3
    2f58:	49 2f       	mov	r20, r25
    2f5a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
 	 	M_Dio_void_setPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,1));
    2f5e:	89 ad       	ldd	r24, Y+57	; 0x39
    2f60:	86 95       	lsr	r24
    2f62:	98 2f       	mov	r25, r24
    2f64:	91 70       	andi	r25, 0x01	; 1
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	64 e0       	ldi	r22, 0x04	; 4
    2f6a:	49 2f       	mov	r20, r25
    2f6c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
 	 	M_Dio_void_setPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,2));
    2f70:	89 ad       	ldd	r24, Y+57	; 0x39
    2f72:	86 95       	lsr	r24
    2f74:	86 95       	lsr	r24
    2f76:	98 2f       	mov	r25, r24
    2f78:	91 70       	andi	r25, 0x01	; 1
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	65 e0       	ldi	r22, 0x05	; 5
    2f7e:	49 2f       	mov	r20, r25
    2f80:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
 	 	M_Dio_void_setPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,3));
    2f84:	89 ad       	ldd	r24, Y+57	; 0x39
    2f86:	86 95       	lsr	r24
    2f88:	86 95       	lsr	r24
    2f8a:	86 95       	lsr	r24
    2f8c:	98 2f       	mov	r25, r24
    2f8e:	91 70       	andi	r25, 0x01	; 1
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	66 e0       	ldi	r22, 0x06	; 6
    2f94:	49 2f       	mov	r20, r25
    2f96:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
 	 	 //step 7 : Activate Enable ,( E = 1)
 	 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	62 e0       	ldi	r22, 0x02	; 2
    2f9e:	41 e0       	ldi	r20, 0x01	; 1
    2fa0:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	a0 e8       	ldi	r26, 0x80	; 128
    2faa:	bf e3       	ldi	r27, 0x3F	; 63
    2fac:	89 8f       	std	Y+25, r24	; 0x19
    2fae:	9a 8f       	std	Y+26, r25	; 0x1a
    2fb0:	ab 8f       	std	Y+27, r26	; 0x1b
    2fb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb4:	69 8d       	ldd	r22, Y+25	; 0x19
    2fb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	4a e7       	ldi	r20, 0x7A	; 122
    2fc2:	53 e4       	ldi	r21, 0x43	; 67
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	8d 8b       	std	Y+21, r24	; 0x15
    2fce:	9e 8b       	std	Y+22, r25	; 0x16
    2fd0:	af 8b       	std	Y+23, r26	; 0x17
    2fd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fda:	98 8d       	ldd	r25, Y+24	; 0x18
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	40 e8       	ldi	r20, 0x80	; 128
    2fe2:	5f e3       	ldi	r21, 0x3F	; 63
    2fe4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fe8:	88 23       	and	r24, r24
    2fea:	2c f4       	brge	.+10     	; 0x2ff6 <H_LCD_void_writeNlatch+0x2fa>
		__ticks = 1;
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9c 8b       	std	Y+20, r25	; 0x14
    2ff2:	8b 8b       	std	Y+19, r24	; 0x13
    2ff4:	3f c0       	rjmp	.+126    	; 0x3074 <H_LCD_void_writeNlatch+0x378>
	else if (__tmp > 65535)
    2ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    2ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	3f ef       	ldi	r19, 0xFF	; 255
    3002:	4f e7       	ldi	r20, 0x7F	; 127
    3004:	57 e4       	ldi	r21, 0x47	; 71
    3006:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    300a:	18 16       	cp	r1, r24
    300c:	4c f5       	brge	.+82     	; 0x3060 <H_LCD_void_writeNlatch+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    300e:	69 8d       	ldd	r22, Y+25	; 0x19
    3010:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3012:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e2       	ldi	r20, 0x20	; 32
    301c:	51 e4       	ldi	r21, 0x41	; 65
    301e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	bc 01       	movw	r22, r24
    3028:	cd 01       	movw	r24, r26
    302a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	9c 8b       	std	Y+20, r25	; 0x14
    3034:	8b 8b       	std	Y+19, r24	; 0x13
    3036:	0f c0       	rjmp	.+30     	; 0x3056 <H_LCD_void_writeNlatch+0x35a>
    3038:	89 e1       	ldi	r24, 0x19	; 25
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	9a 8b       	std	Y+18, r25	; 0x12
    303e:	89 8b       	std	Y+17, r24	; 0x11
    3040:	89 89       	ldd	r24, Y+17	; 0x11
    3042:	9a 89       	ldd	r25, Y+18	; 0x12
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	f1 f7       	brne	.-4      	; 0x3044 <H_LCD_void_writeNlatch+0x348>
    3048:	9a 8b       	std	Y+18, r25	; 0x12
    304a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304c:	8b 89       	ldd	r24, Y+19	; 0x13
    304e:	9c 89       	ldd	r25, Y+20	; 0x14
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	9c 8b       	std	Y+20, r25	; 0x14
    3054:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3056:	8b 89       	ldd	r24, Y+19	; 0x13
    3058:	9c 89       	ldd	r25, Y+20	; 0x14
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	69 f7       	brne	.-38     	; 0x3038 <H_LCD_void_writeNlatch+0x33c>
    305e:	14 c0       	rjmp	.+40     	; 0x3088 <H_LCD_void_writeNlatch+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3060:	6d 89       	ldd	r22, Y+21	; 0x15
    3062:	7e 89       	ldd	r23, Y+22	; 0x16
    3064:	8f 89       	ldd	r24, Y+23	; 0x17
    3066:	98 8d       	ldd	r25, Y+24	; 0x18
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	9c 8b       	std	Y+20, r25	; 0x14
    3072:	8b 8b       	std	Y+19, r24	; 0x13
    3074:	8b 89       	ldd	r24, Y+19	; 0x13
    3076:	9c 89       	ldd	r25, Y+20	; 0x14
    3078:	98 8b       	std	Y+16, r25	; 0x10
    307a:	8f 87       	std	Y+15, r24	; 0x0f
    307c:	8f 85       	ldd	r24, Y+15	; 0x0f
    307e:	98 89       	ldd	r25, Y+16	; 0x10
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	f1 f7       	brne	.-4      	; 0x3080 <H_LCD_void_writeNlatch+0x384>
    3084:	98 8b       	std	Y+16, r25	; 0x10
    3086:	8f 87       	std	Y+15, r24	; 0x0f
 	 	 // step 8 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 	 	 // step 9 : deactivate Enable (E = 0)
 	 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	62 e0       	ldi	r22, 0x02	; 2
    308c:	40 e0       	ldi	r20, 0x00	; 0
    308e:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	a0 ea       	ldi	r26, 0xA0	; 160
    3098:	b0 e4       	ldi	r27, 0x40	; 64
    309a:	8b 87       	std	Y+11, r24	; 0x0b
    309c:	9c 87       	std	Y+12, r25	; 0x0c
    309e:	ad 87       	std	Y+13, r26	; 0x0d
    30a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	4a e7       	ldi	r20, 0x7A	; 122
    30b0:	53 e4       	ldi	r21, 0x43	; 67
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	8f 83       	std	Y+7, r24	; 0x07
    30bc:	98 87       	std	Y+8, r25	; 0x08
    30be:	a9 87       	std	Y+9, r26	; 0x09
    30c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30c2:	6f 81       	ldd	r22, Y+7	; 0x07
    30c4:	78 85       	ldd	r23, Y+8	; 0x08
    30c6:	89 85       	ldd	r24, Y+9	; 0x09
    30c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	40 e8       	ldi	r20, 0x80	; 128
    30d0:	5f e3       	ldi	r21, 0x3F	; 63
    30d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30d6:	88 23       	and	r24, r24
    30d8:	2c f4       	brge	.+10     	; 0x30e4 <H_LCD_void_writeNlatch+0x3e8>
		__ticks = 1;
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	9e 83       	std	Y+6, r25	; 0x06
    30e0:	8d 83       	std	Y+5, r24	; 0x05
    30e2:	3f c0       	rjmp	.+126    	; 0x3162 <H_LCD_void_writeNlatch+0x466>
	else if (__tmp > 65535)
    30e4:	6f 81       	ldd	r22, Y+7	; 0x07
    30e6:	78 85       	ldd	r23, Y+8	; 0x08
    30e8:	89 85       	ldd	r24, Y+9	; 0x09
    30ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	3f ef       	ldi	r19, 0xFF	; 255
    30f0:	4f e7       	ldi	r20, 0x7F	; 127
    30f2:	57 e4       	ldi	r21, 0x47	; 71
    30f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30f8:	18 16       	cp	r1, r24
    30fa:	4c f5       	brge	.+82     	; 0x314e <H_LCD_void_writeNlatch+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    30fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3100:	8d 85       	ldd	r24, Y+13	; 0x0d
    3102:	9e 85       	ldd	r25, Y+14	; 0x0e
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e2       	ldi	r20, 0x20	; 32
    310a:	51 e4       	ldi	r21, 0x41	; 65
    310c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	bc 01       	movw	r22, r24
    3116:	cd 01       	movw	r24, r26
    3118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	9e 83       	std	Y+6, r25	; 0x06
    3122:	8d 83       	std	Y+5, r24	; 0x05
    3124:	0f c0       	rjmp	.+30     	; 0x3144 <H_LCD_void_writeNlatch+0x448>
    3126:	89 e1       	ldi	r24, 0x19	; 25
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	9c 83       	std	Y+4, r25	; 0x04
    312c:	8b 83       	std	Y+3, r24	; 0x03
    312e:	8b 81       	ldd	r24, Y+3	; 0x03
    3130:	9c 81       	ldd	r25, Y+4	; 0x04
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	f1 f7       	brne	.-4      	; 0x3132 <H_LCD_void_writeNlatch+0x436>
    3136:	9c 83       	std	Y+4, r25	; 0x04
    3138:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313a:	8d 81       	ldd	r24, Y+5	; 0x05
    313c:	9e 81       	ldd	r25, Y+6	; 0x06
    313e:	01 97       	sbiw	r24, 0x01	; 1
    3140:	9e 83       	std	Y+6, r25	; 0x06
    3142:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3144:	8d 81       	ldd	r24, Y+5	; 0x05
    3146:	9e 81       	ldd	r25, Y+6	; 0x06
    3148:	00 97       	sbiw	r24, 0x00	; 0
    314a:	69 f7       	brne	.-38     	; 0x3126 <H_LCD_void_writeNlatch+0x42a>
    314c:	14 c0       	rjmp	.+40     	; 0x3176 <H_LCD_void_writeNlatch+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    314e:	6f 81       	ldd	r22, Y+7	; 0x07
    3150:	78 85       	ldd	r23, Y+8	; 0x08
    3152:	89 85       	ldd	r24, Y+9	; 0x09
    3154:	9a 85       	ldd	r25, Y+10	; 0x0a
    3156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	9e 83       	std	Y+6, r25	; 0x06
    3160:	8d 83       	std	Y+5, r24	; 0x05
    3162:	8d 81       	ldd	r24, Y+5	; 0x05
    3164:	9e 81       	ldd	r25, Y+6	; 0x06
    3166:	9a 83       	std	Y+2, r25	; 0x02
    3168:	89 83       	std	Y+1, r24	; 0x01
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	9a 81       	ldd	r25, Y+2	; 0x02
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	f1 f7       	brne	.-4      	; 0x316e <H_LCD_void_writeNlatch+0x472>
    3172:	9a 83       	std	Y+2, r25	; 0x02
    3174:	89 83       	std	Y+1, r24	; 0x01
 	 	_delay_ms(5);
#else
  #error("Wrong LCD mode")
#endif

}
    3176:	e9 96       	adiw	r28, 0x39	; 57
    3178:	0f b6       	in	r0, 0x3f	; 63
    317a:	f8 94       	cli
    317c:	de bf       	out	0x3e, r29	; 62
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	cd bf       	out	0x3d, r28	; 61
    3182:	cf 91       	pop	r28
    3184:	df 91       	pop	r29
    3186:	08 95       	ret

00003188 <H_KEYPAD_void_init>:
#include"Dio_int.h"
#include "keypad_int.h"
#include "keypad_config.h"
#include <util/delay.h>
void H_KEYPAD_void_init(void)
{
    3188:	df 93       	push	r29
    318a:	cf 93       	push	r28
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
	//set all rows directions
	 M_Dio_void_setPinDir(KEYPAD_R0_PORT,KEYPAD_R0_PIN,1);
    3190:	82 e0       	ldi	r24, 0x02	; 2
    3192:	64 e0       	ldi	r22, 0x04	; 4
    3194:	41 e0       	ldi	r20, 0x01	; 1
    3196:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	 M_Dio_void_setPinDir(KEYPAD_R1_PORT,KEYPAD_R1_PIN,1);
    319a:	82 e0       	ldi	r24, 0x02	; 2
    319c:	65 e0       	ldi	r22, 0x05	; 5
    319e:	41 e0       	ldi	r20, 0x01	; 1
    31a0:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	 M_Dio_void_setPinDir(KEYPAD_R2_PORT,KEYPAD_R2_PIN,1);
    31a4:	82 e0       	ldi	r24, 0x02	; 2
    31a6:	66 e0       	ldi	r22, 0x06	; 6
    31a8:	41 e0       	ldi	r20, 0x01	; 1
    31aa:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	 M_Dio_void_setPinDir(KEYPAD_R3_PORT,KEYPAD_R3_PIN,1);
    31ae:	82 e0       	ldi	r24, 0x02	; 2
    31b0:	67 e0       	ldi	r22, 0x07	; 7
    31b2:	41 e0       	ldi	r20, 0x01	; 1
    31b4:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	 //set all columns directions
	 M_Dio_void_setPinDir(KEYPAD_C0_PORT,KEYPAD_C0_PIN,0);
    31b8:	84 e0       	ldi	r24, 0x04	; 4
    31ba:	62 e0       	ldi	r22, 0x02	; 2
    31bc:	40 e0       	ldi	r20, 0x00	; 0
    31be:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	 M_Dio_void_setPinDir(KEYPAD_C1_PORT,KEYPAD_C1_PIN,0);
    31c2:	84 e0       	ldi	r24, 0x04	; 4
    31c4:	63 e0       	ldi	r22, 0x03	; 3
    31c6:	40 e0       	ldi	r20, 0x00	; 0
    31c8:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	 M_Dio_void_setPinDir(KEYPAD_C2_PORT,KEYPAD_C2_PIN,0);
    31cc:	84 e0       	ldi	r24, 0x04	; 4
    31ce:	64 e0       	ldi	r22, 0x04	; 4
    31d0:	40 e0       	ldi	r20, 0x00	; 0
    31d2:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	 M_Dio_void_setPinDir(KEYPAD_C3_PORT,KEYPAD_C3_PIN,0);
    31d6:	84 e0       	ldi	r24, 0x04	; 4
    31d8:	65 e0       	ldi	r22, 0x05	; 5
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	 //set the value of the rows
	 M_Dio_void_setPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	64 e0       	ldi	r22, 0x04	; 4
    31e4:	41 e0       	ldi	r20, 0x01	; 1
    31e6:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
	 M_Dio_void_setPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
    31ea:	82 e0       	ldi	r24, 0x02	; 2
    31ec:	65 e0       	ldi	r22, 0x05	; 5
    31ee:	41 e0       	ldi	r20, 0x01	; 1
    31f0:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
	 M_Dio_void_setPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    31f4:	82 e0       	ldi	r24, 0x02	; 2
    31f6:	66 e0       	ldi	r22, 0x06	; 6
    31f8:	41 e0       	ldi	r20, 0x01	; 1
    31fa:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
	 M_Dio_void_setPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,HIGH);
    31fe:	82 e0       	ldi	r24, 0x02	; 2
    3200:	67 e0       	ldi	r22, 0x07	; 7
    3202:	41 e0       	ldi	r20, 0x01	; 1
    3204:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
// set all rows direction as output
// set all columns direction as inputs
	//deactivate rows
}
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <H_KEYPAD_void_getPressedKey>:
u8 H_KEYPAD_void_getPressedKey(void)
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	a8 97       	sbiw	r28, 0x28	; 40
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	de bf       	out	0x3e, r29	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	cd bf       	out	0x3d, r28	; 61
  u8 Loc_key = NOT_PRESSED_KEY;
    3222:	8f ef       	ldi	r24, 0xFF	; 255
    3224:	89 8b       	std	Y+17, r24	; 0x11
 u8 loc_row_indx;
 u8 Loc_col_indx;
 u8 read;
 u8 Loc_KEYPAD_ARR [4][4]=KEYPAD_ARR_1;
    3226:	ce 01       	movw	r24, r28
    3228:	43 96       	adiw	r24, 0x13	; 19
    322a:	9d a3       	std	Y+37, r25	; 0x25
    322c:	8c a3       	std	Y+36, r24	; 0x24
    322e:	ec e7       	ldi	r30, 0x7C	; 124
    3230:	f1 e0       	ldi	r31, 0x01	; 1
    3232:	ff a3       	std	Y+39, r31	; 0x27
    3234:	ee a3       	std	Y+38, r30	; 0x26
    3236:	f0 e1       	ldi	r31, 0x10	; 16
    3238:	f8 a7       	std	Y+40, r31	; 0x28
    323a:	ee a1       	ldd	r30, Y+38	; 0x26
    323c:	ff a1       	ldd	r31, Y+39	; 0x27
    323e:	00 80       	ld	r0, Z
    3240:	8e a1       	ldd	r24, Y+38	; 0x26
    3242:	9f a1       	ldd	r25, Y+39	; 0x27
    3244:	01 96       	adiw	r24, 0x01	; 1
    3246:	9f a3       	std	Y+39, r25	; 0x27
    3248:	8e a3       	std	Y+38, r24	; 0x26
    324a:	ec a1       	ldd	r30, Y+36	; 0x24
    324c:	fd a1       	ldd	r31, Y+37	; 0x25
    324e:	00 82       	st	Z, r0
    3250:	8c a1       	ldd	r24, Y+36	; 0x24
    3252:	9d a1       	ldd	r25, Y+37	; 0x25
    3254:	01 96       	adiw	r24, 0x01	; 1
    3256:	9d a3       	std	Y+37, r25	; 0x25
    3258:	8c a3       	std	Y+36, r24	; 0x24
    325a:	98 a5       	ldd	r25, Y+40	; 0x28
    325c:	91 50       	subi	r25, 0x01	; 1
    325e:	98 a7       	std	Y+40, r25	; 0x28
    3260:	e8 a5       	ldd	r30, Y+40	; 0x28
    3262:	ee 23       	and	r30, r30
    3264:	51 f7       	brne	.-44     	; 0x323a <H_KEYPAD_void_getPressedKey+0x2c>
 for(loc_row_indx = KEYPAD_R0_PIN;loc_row_indx <= KEYPAD_R3_PIN; loc_row_indx++)
    3266:	84 e0       	ldi	r24, 0x04	; 4
    3268:	88 8b       	std	Y+16, r24	; 0x10
    326a:	ca c0       	rjmp	.+404    	; 0x3400 <H_KEYPAD_void_getPressedKey+0x1f2>
 {
	 M_Dio_void_setPinValue(KEYPAD_ROW_PORT,loc_row_indx ,LOW);
    326c:	82 e0       	ldi	r24, 0x02	; 2
    326e:	68 89       	ldd	r22, Y+16	; 0x10
    3270:	40 e0       	ldi	r20, 0x00	; 0
    3272:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
	 for(Loc_col_indx = KEYPAD_C0_PIN;Loc_col_indx <= KEYPAD_C3_PIN; Loc_col_indx++)
    3276:	82 e0       	ldi	r24, 0x02	; 2
    3278:	8f 87       	std	Y+15, r24	; 0x0f
    327a:	b6 c0       	rjmp	.+364    	; 0x33e8 <H_KEYPAD_void_getPressedKey+0x1da>
	  {
		 //get 1st reading
		 M_Dio_void_getPinValue(KEYPAD_COL_PORT,Loc_col_indx ,&read);
    327c:	9e 01       	movw	r18, r28
    327e:	2e 5e       	subi	r18, 0xEE	; 238
    3280:	3f 4f       	sbci	r19, 0xFF	; 255
    3282:	84 e0       	ldi	r24, 0x04	; 4
    3284:	6f 85       	ldd	r22, Y+15	; 0x0f
    3286:	a9 01       	movw	r20, r18
    3288:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <M_Dio_void_getPinValue>
		 if(read== ACTIVE_LOW_PRESSED)
    328c:	8a 89       	ldd	r24, Y+18	; 0x12
    328e:	88 23       	and	r24, r24
    3290:	09 f0       	breq	.+2      	; 0x3294 <H_KEYPAD_void_getPressedKey+0x86>
    3292:	a7 c0       	rjmp	.+334    	; 0x33e2 <H_KEYPAD_void_getPressedKey+0x1d4>
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	a8 e4       	ldi	r26, 0x48	; 72
    329a:	b3 e4       	ldi	r27, 0x43	; 67
    329c:	8b 87       	std	Y+11, r24	; 0x0b
    329e:	9c 87       	std	Y+12, r25	; 0x0c
    32a0:	ad 87       	std	Y+13, r26	; 0x0d
    32a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	4a e7       	ldi	r20, 0x7A	; 122
    32b2:	53 e4       	ldi	r21, 0x43	; 67
    32b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	8f 83       	std	Y+7, r24	; 0x07
    32be:	98 87       	std	Y+8, r25	; 0x08
    32c0:	a9 87       	std	Y+9, r26	; 0x09
    32c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32c4:	6f 81       	ldd	r22, Y+7	; 0x07
    32c6:	78 85       	ldd	r23, Y+8	; 0x08
    32c8:	89 85       	ldd	r24, Y+9	; 0x09
    32ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	40 e8       	ldi	r20, 0x80	; 128
    32d2:	5f e3       	ldi	r21, 0x3F	; 63
    32d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32d8:	88 23       	and	r24, r24
    32da:	2c f4       	brge	.+10     	; 0x32e6 <H_KEYPAD_void_getPressedKey+0xd8>
		__ticks = 1;
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	9e 83       	std	Y+6, r25	; 0x06
    32e2:	8d 83       	std	Y+5, r24	; 0x05
    32e4:	3f c0       	rjmp	.+126    	; 0x3364 <H_KEYPAD_void_getPressedKey+0x156>
	else if (__tmp > 65535)
    32e6:	6f 81       	ldd	r22, Y+7	; 0x07
    32e8:	78 85       	ldd	r23, Y+8	; 0x08
    32ea:	89 85       	ldd	r24, Y+9	; 0x09
    32ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	3f ef       	ldi	r19, 0xFF	; 255
    32f2:	4f e7       	ldi	r20, 0x7F	; 127
    32f4:	57 e4       	ldi	r21, 0x47	; 71
    32f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32fa:	18 16       	cp	r1, r24
    32fc:	4c f5       	brge	.+82     	; 0x3350 <H_KEYPAD_void_getPressedKey+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3300:	7c 85       	ldd	r23, Y+12	; 0x0c
    3302:	8d 85       	ldd	r24, Y+13	; 0x0d
    3304:	9e 85       	ldd	r25, Y+14	; 0x0e
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e2       	ldi	r20, 0x20	; 32
    330c:	51 e4       	ldi	r21, 0x41	; 65
    330e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	bc 01       	movw	r22, r24
    3318:	cd 01       	movw	r24, r26
    331a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	9e 83       	std	Y+6, r25	; 0x06
    3324:	8d 83       	std	Y+5, r24	; 0x05
    3326:	0f c0       	rjmp	.+30     	; 0x3346 <H_KEYPAD_void_getPressedKey+0x138>
    3328:	89 e1       	ldi	r24, 0x19	; 25
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	9c 83       	std	Y+4, r25	; 0x04
    332e:	8b 83       	std	Y+3, r24	; 0x03
    3330:	8b 81       	ldd	r24, Y+3	; 0x03
    3332:	9c 81       	ldd	r25, Y+4	; 0x04
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	f1 f7       	brne	.-4      	; 0x3334 <H_KEYPAD_void_getPressedKey+0x126>
    3338:	9c 83       	std	Y+4, r25	; 0x04
    333a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333c:	8d 81       	ldd	r24, Y+5	; 0x05
    333e:	9e 81       	ldd	r25, Y+6	; 0x06
    3340:	01 97       	sbiw	r24, 0x01	; 1
    3342:	9e 83       	std	Y+6, r25	; 0x06
    3344:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3346:	8d 81       	ldd	r24, Y+5	; 0x05
    3348:	9e 81       	ldd	r25, Y+6	; 0x06
    334a:	00 97       	sbiw	r24, 0x00	; 0
    334c:	69 f7       	brne	.-38     	; 0x3328 <H_KEYPAD_void_getPressedKey+0x11a>
    334e:	14 c0       	rjmp	.+40     	; 0x3378 <H_KEYPAD_void_getPressedKey+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3350:	6f 81       	ldd	r22, Y+7	; 0x07
    3352:	78 85       	ldd	r23, Y+8	; 0x08
    3354:	89 85       	ldd	r24, Y+9	; 0x09
    3356:	9a 85       	ldd	r25, Y+10	; 0x0a
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	9e 83       	std	Y+6, r25	; 0x06
    3362:	8d 83       	std	Y+5, r24	; 0x05
    3364:	8d 81       	ldd	r24, Y+5	; 0x05
    3366:	9e 81       	ldd	r25, Y+6	; 0x06
    3368:	9a 83       	std	Y+2, r25	; 0x02
    336a:	89 83       	std	Y+1, r24	; 0x01
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	9a 81       	ldd	r25, Y+2	; 0x02
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	f1 f7       	brne	.-4      	; 0x3370 <H_KEYPAD_void_getPressedKey+0x162>
    3374:	9a 83       	std	Y+2, r25	; 0x02
    3376:	89 83       	std	Y+1, r24	; 0x01
		 {
             //debouncing delay
			 _delay_ms(200);
			 //get 2nd reading
			 M_Dio_void_getPinValue(KEYPAD_COL_PORT,Loc_col_indx ,&read);
    3378:	9e 01       	movw	r18, r28
    337a:	2e 5e       	subi	r18, 0xEE	; 238
    337c:	3f 4f       	sbci	r19, 0xFF	; 255
    337e:	84 e0       	ldi	r24, 0x04	; 4
    3380:	6f 85       	ldd	r22, Y+15	; 0x0f
    3382:	a9 01       	movw	r20, r18
    3384:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <M_Dio_void_getPinValue>
			 if(read ==ACTIVE_LOW_PRESSED)
    3388:	8a 89       	ldd	r24, Y+18	; 0x12
    338a:	88 23       	and	r24, r24
    338c:	51 f5       	brne	.+84     	; 0x33e2 <H_KEYPAD_void_getPressedKey+0x1d4>
    338e:	08 c0       	rjmp	.+16     	; 0x33a0 <H_KEYPAD_void_getPressedKey+0x192>
			 {
				 while(read == ACTIVE_LOW_PRESSED)
				 {
					 M_Dio_void_getPinValue(KEYPAD_COL_PORT,Loc_col_indx ,&read);
    3390:	9e 01       	movw	r18, r28
    3392:	2e 5e       	subi	r18, 0xEE	; 238
    3394:	3f 4f       	sbci	r19, 0xFF	; 255
    3396:	84 e0       	ldi	r24, 0x04	; 4
    3398:	6f 85       	ldd	r22, Y+15	; 0x0f
    339a:	a9 01       	movw	r20, r18
    339c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <M_Dio_void_getPinValue>
			 _delay_ms(200);
			 //get 2nd reading
			 M_Dio_void_getPinValue(KEYPAD_COL_PORT,Loc_col_indx ,&read);
			 if(read ==ACTIVE_LOW_PRESSED)
			 {
				 while(read == ACTIVE_LOW_PRESSED)
    33a0:	8a 89       	ldd	r24, Y+18	; 0x12
    33a2:	88 23       	and	r24, r24
    33a4:	a9 f3       	breq	.-22     	; 0x3390 <H_KEYPAD_void_getPressedKey+0x182>
				 {
					 M_Dio_void_getPinValue(KEYPAD_COL_PORT,Loc_col_indx ,&read);
				 }
				 Loc_key=Loc_KEYPAD_ARR [loc_row_indx-KEYPAD_R0_PIN][Loc_col_indx-KEYPAD_C0_PIN];
    33a6:	88 89       	ldd	r24, Y+16	; 0x10
    33a8:	88 2f       	mov	r24, r24
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	9c 01       	movw	r18, r24
    33ae:	24 50       	subi	r18, 0x04	; 4
    33b0:	30 40       	sbci	r19, 0x00	; 0
    33b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b4:	88 2f       	mov	r24, r24
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	ac 01       	movw	r20, r24
    33ba:	42 50       	subi	r20, 0x02	; 2
    33bc:	50 40       	sbci	r21, 0x00	; 0
    33be:	22 0f       	add	r18, r18
    33c0:	33 1f       	adc	r19, r19
    33c2:	22 0f       	add	r18, r18
    33c4:	33 1f       	adc	r19, r19
    33c6:	ce 01       	movw	r24, r28
    33c8:	01 96       	adiw	r24, 0x01	; 1
    33ca:	82 0f       	add	r24, r18
    33cc:	93 1f       	adc	r25, r19
    33ce:	84 0f       	add	r24, r20
    33d0:	95 1f       	adc	r25, r21
    33d2:	fc 01       	movw	r30, r24
    33d4:	72 96       	adiw	r30, 0x12	; 18
    33d6:	80 81       	ld	r24, Z
    33d8:	89 8b       	std	Y+17, r24	; 0x11
				 return Loc_key;
    33da:	89 89       	ldd	r24, Y+17	; 0x11
    33dc:	8b a3       	std	Y+35, r24	; 0x23
	  }
	 //decativate row
	 M_Dio_void_setPinValue(KEYPAD_ROW_PORT,loc_row_indx ,HIGH);
 }

}
    33de:	8b a1       	ldd	r24, Y+35	; 0x23
    33e0:	13 c0       	rjmp	.+38     	; 0x3408 <H_KEYPAD_void_getPressedKey+0x1fa>
 u8 read;
 u8 Loc_KEYPAD_ARR [4][4]=KEYPAD_ARR_1;
 for(loc_row_indx = KEYPAD_R0_PIN;loc_row_indx <= KEYPAD_R3_PIN; loc_row_indx++)
 {
	 M_Dio_void_setPinValue(KEYPAD_ROW_PORT,loc_row_indx ,LOW);
	 for(Loc_col_indx = KEYPAD_C0_PIN;Loc_col_indx <= KEYPAD_C3_PIN; Loc_col_indx++)
    33e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e4:	8f 5f       	subi	r24, 0xFF	; 255
    33e6:	8f 87       	std	Y+15, r24	; 0x0f
    33e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ea:	86 30       	cpi	r24, 0x06	; 6
    33ec:	08 f4       	brcc	.+2      	; 0x33f0 <H_KEYPAD_void_getPressedKey+0x1e2>
    33ee:	46 cf       	rjmp	.-372    	; 0x327c <H_KEYPAD_void_getPressedKey+0x6e>
				 return Loc_key;
			 }//if 2nd reading
		 }//if 1st reading
	  }
	 //decativate row
	 M_Dio_void_setPinValue(KEYPAD_ROW_PORT,loc_row_indx ,HIGH);
    33f0:	82 e0       	ldi	r24, 0x02	; 2
    33f2:	68 89       	ldd	r22, Y+16	; 0x10
    33f4:	41 e0       	ldi	r20, 0x01	; 1
    33f6:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
  u8 Loc_key = NOT_PRESSED_KEY;
 u8 loc_row_indx;
 u8 Loc_col_indx;
 u8 read;
 u8 Loc_KEYPAD_ARR [4][4]=KEYPAD_ARR_1;
 for(loc_row_indx = KEYPAD_R0_PIN;loc_row_indx <= KEYPAD_R3_PIN; loc_row_indx++)
    33fa:	88 89       	ldd	r24, Y+16	; 0x10
    33fc:	8f 5f       	subi	r24, 0xFF	; 255
    33fe:	88 8b       	std	Y+16, r24	; 0x10
    3400:	88 89       	ldd	r24, Y+16	; 0x10
    3402:	88 30       	cpi	r24, 0x08	; 8
    3404:	08 f4       	brcc	.+2      	; 0x3408 <H_KEYPAD_void_getPressedKey+0x1fa>
    3406:	32 cf       	rjmp	.-412    	; 0x326c <H_KEYPAD_void_getPressedKey+0x5e>
	  }
	 //decativate row
	 M_Dio_void_setPinValue(KEYPAD_ROW_PORT,loc_row_indx ,HIGH);
 }

}
    3408:	a8 96       	adiw	r28, 0x28	; 40
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	f8 94       	cli
    340e:	de bf       	out	0x3e, r29	; 62
    3410:	0f be       	out	0x3f, r0	; 63
    3412:	cd bf       	out	0x3d, r28	; 61
    3414:	cf 91       	pop	r28
    3416:	df 91       	pop	r29
    3418:	08 95       	ret

0000341a <H_Buzzer_void_INIT>:
 *      Author: lenovo
 */

#include "buzzer.h"
void H_Buzzer_void_INIT(void)
{
    341a:	df 93       	push	r29
    341c:	cf 93       	push	r28
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinDir(BUZZER_PORT,BUZZER_PIN,1);
    3422:	83 e0       	ldi	r24, 0x03	; 3
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	65 e0       	ldi	r22, 0x05	; 5
    3428:	70 e0       	ldi	r23, 0x00	; 0
    342a:	41 e0       	ldi	r20, 0x01	; 1
    342c:	50 e0       	ldi	r21, 0x00	; 0
    342e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>

}
    3432:	cf 91       	pop	r28
    3434:	df 91       	pop	r29
    3436:	08 95       	ret

00003438 <H_Buzzer_void_ON>:
void H_Buzzer_void_ON(void)
{
    3438:	df 93       	push	r29
    343a:	cf 93       	push	r28
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
	 M_Dio_void_setPinValue(BUZZER_PORT,BUZZER_PIN,1);
    3440:	83 e0       	ldi	r24, 0x03	; 3
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	65 e0       	ldi	r22, 0x05	; 5
    3446:	70 e0       	ldi	r23, 0x00	; 0
    3448:	41 e0       	ldi	r20, 0x01	; 1
    344a:	50 e0       	ldi	r21, 0x00	; 0
    344c:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>
}
    3450:	cf 91       	pop	r28
    3452:	df 91       	pop	r29
    3454:	08 95       	ret

00003456 <H_Buzzer_void_OFF>:
void H_Buzzer_void_OFF(void)
{
    3456:	df 93       	push	r29
    3458:	cf 93       	push	r28
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62
	 M_Dio_void_setPinValue(BUZZER_PORT,BUZZER_PIN,0);
    345e:	83 e0       	ldi	r24, 0x03	; 3
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	65 e0       	ldi	r22, 0x05	; 5
    3464:	70 e0       	ldi	r23, 0x00	; 0
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	50 e0       	ldi	r21, 0x00	; 0
    346a:	0e 94 80 0b 	call	0x1700	; 0x1700 <M_Dio_void_setPinValue>

}
    346e:	cf 91       	pop	r28
    3470:	df 91       	pop	r29
    3472:	08 95       	ret

00003474 <main>:
	}

}
#endif
void main()
{
    3474:	df 93       	push	r29
    3476:	cf 93       	push	r28
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
    347c:	aa 97       	sbiw	r28, 0x2a	; 42
    347e:	0f b6       	in	r0, 0x3f	; 63
    3480:	f8 94       	cli
    3482:	de bf       	out	0x3e, r29	; 62
    3484:	0f be       	out	0x3f, r0	; 63
    3486:	cd bf       	out	0x3d, r28	; 61
	// init (Timer mode + Timer OC0 mode)
	M_Dio_void_setPinDir(PORTB_ID,PIN3_ID,OUTPUT);
    3488:	82 e0       	ldi	r24, 0x02	; 2
    348a:	63 e0       	ldi	r22, 0x03	; 3
    348c:	41 e0       	ldi	r20, 0x01	; 1
    348e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <M_Dio_void_setPinDir>
	M_TIMER0_void_Init();
    3492:	0e 94 8e 07 	call	0xf1c	; 0xf1c <M_TIMER0_void_Init>
	M_TIMER0_void_Start();
    3496:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_TIMER0_void_Start>
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	aa e7       	ldi	r26, 0x7A	; 122
    34a0:	b4 e4       	ldi	r27, 0x44	; 68
    34a2:	8f a3       	std	Y+39, r24	; 0x27
    34a4:	98 a7       	std	Y+40, r25	; 0x28
    34a6:	a9 a7       	std	Y+41, r26	; 0x29
    34a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34aa:	6f a1       	ldd	r22, Y+39	; 0x27
    34ac:	78 a5       	ldd	r23, Y+40	; 0x28
    34ae:	89 a5       	ldd	r24, Y+41	; 0x29
    34b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	4a e7       	ldi	r20, 0x7A	; 122
    34b8:	53 e4       	ldi	r21, 0x43	; 67
    34ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	8b a3       	std	Y+35, r24	; 0x23
    34c4:	9c a3       	std	Y+36, r25	; 0x24
    34c6:	ad a3       	std	Y+37, r26	; 0x25
    34c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34ca:	6b a1       	ldd	r22, Y+35	; 0x23
    34cc:	7c a1       	ldd	r23, Y+36	; 0x24
    34ce:	8d a1       	ldd	r24, Y+37	; 0x25
    34d0:	9e a1       	ldd	r25, Y+38	; 0x26
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e8       	ldi	r20, 0x80	; 128
    34d8:	5f e3       	ldi	r21, 0x3F	; 63
    34da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34de:	88 23       	and	r24, r24
    34e0:	2c f4       	brge	.+10     	; 0x34ec <main+0x78>
		__ticks = 1;
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	9a a3       	std	Y+34, r25	; 0x22
    34e8:	89 a3       	std	Y+33, r24	; 0x21
    34ea:	3f c0       	rjmp	.+126    	; 0x356a <main+0xf6>
	else if (__tmp > 65535)
    34ec:	6b a1       	ldd	r22, Y+35	; 0x23
    34ee:	7c a1       	ldd	r23, Y+36	; 0x24
    34f0:	8d a1       	ldd	r24, Y+37	; 0x25
    34f2:	9e a1       	ldd	r25, Y+38	; 0x26
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	3f ef       	ldi	r19, 0xFF	; 255
    34f8:	4f e7       	ldi	r20, 0x7F	; 127
    34fa:	57 e4       	ldi	r21, 0x47	; 71
    34fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3500:	18 16       	cp	r1, r24
    3502:	4c f5       	brge	.+82     	; 0x3556 <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3504:	6f a1       	ldd	r22, Y+39	; 0x27
    3506:	78 a5       	ldd	r23, Y+40	; 0x28
    3508:	89 a5       	ldd	r24, Y+41	; 0x29
    350a:	9a a5       	ldd	r25, Y+42	; 0x2a
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	40 e2       	ldi	r20, 0x20	; 32
    3512:	51 e4       	ldi	r21, 0x41	; 65
    3514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	bc 01       	movw	r22, r24
    351e:	cd 01       	movw	r24, r26
    3520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	9a a3       	std	Y+34, r25	; 0x22
    352a:	89 a3       	std	Y+33, r24	; 0x21
    352c:	0f c0       	rjmp	.+30     	; 0x354c <main+0xd8>
    352e:	89 e1       	ldi	r24, 0x19	; 25
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	98 a3       	std	Y+32, r25	; 0x20
    3534:	8f 8f       	std	Y+31, r24	; 0x1f
    3536:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3538:	98 a1       	ldd	r25, Y+32	; 0x20
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	f1 f7       	brne	.-4      	; 0x353a <main+0xc6>
    353e:	98 a3       	std	Y+32, r25	; 0x20
    3540:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3542:	89 a1       	ldd	r24, Y+33	; 0x21
    3544:	9a a1       	ldd	r25, Y+34	; 0x22
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	9a a3       	std	Y+34, r25	; 0x22
    354a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354c:	89 a1       	ldd	r24, Y+33	; 0x21
    354e:	9a a1       	ldd	r25, Y+34	; 0x22
    3550:	00 97       	sbiw	r24, 0x00	; 0
    3552:	69 f7       	brne	.-38     	; 0x352e <main+0xba>
    3554:	14 c0       	rjmp	.+40     	; 0x357e <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3556:	6b a1       	ldd	r22, Y+35	; 0x23
    3558:	7c a1       	ldd	r23, Y+36	; 0x24
    355a:	8d a1       	ldd	r24, Y+37	; 0x25
    355c:	9e a1       	ldd	r25, Y+38	; 0x26
    355e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	9a a3       	std	Y+34, r25	; 0x22
    3568:	89 a3       	std	Y+33, r24	; 0x21
    356a:	89 a1       	ldd	r24, Y+33	; 0x21
    356c:	9a a1       	ldd	r25, Y+34	; 0x22
    356e:	9e 8f       	std	Y+30, r25	; 0x1e
    3570:	8d 8f       	std	Y+29, r24	; 0x1d
    3572:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3574:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	f1 f7       	brne	.-4      	; 0x3576 <main+0x102>
    357a:	9e 8f       	std	Y+30, r25	; 0x1e
    357c:	8d 8f       	std	Y+29, r24	; 0x1d
	while(1)
	{
		_delay_ms(1000);
		M_TIMER0_void_setphaseCorrectPWM(50);
    357e:	82 e3       	ldi	r24, 0x32	; 50
    3580:	0e 94 cc 08 	call	0x1198	; 0x1198 <M_TIMER0_void_setphaseCorrectPWM>
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	aa e7       	ldi	r26, 0x7A	; 122
    358a:	b4 e4       	ldi	r27, 0x44	; 68
    358c:	89 8f       	std	Y+25, r24	; 0x19
    358e:	9a 8f       	std	Y+26, r25	; 0x1a
    3590:	ab 8f       	std	Y+27, r26	; 0x1b
    3592:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3594:	69 8d       	ldd	r22, Y+25	; 0x19
    3596:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    359a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	4a e7       	ldi	r20, 0x7A	; 122
    35a2:	53 e4       	ldi	r21, 0x43	; 67
    35a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	8d 8b       	std	Y+21, r24	; 0x15
    35ae:	9e 8b       	std	Y+22, r25	; 0x16
    35b0:	af 8b       	std	Y+23, r26	; 0x17
    35b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35b4:	6d 89       	ldd	r22, Y+21	; 0x15
    35b6:	7e 89       	ldd	r23, Y+22	; 0x16
    35b8:	8f 89       	ldd	r24, Y+23	; 0x17
    35ba:	98 8d       	ldd	r25, Y+24	; 0x18
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	40 e8       	ldi	r20, 0x80	; 128
    35c2:	5f e3       	ldi	r21, 0x3F	; 63
    35c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35c8:	88 23       	and	r24, r24
    35ca:	2c f4       	brge	.+10     	; 0x35d6 <main+0x162>
		__ticks = 1;
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	9c 8b       	std	Y+20, r25	; 0x14
    35d2:	8b 8b       	std	Y+19, r24	; 0x13
    35d4:	3f c0       	rjmp	.+126    	; 0x3654 <main+0x1e0>
	else if (__tmp > 65535)
    35d6:	6d 89       	ldd	r22, Y+21	; 0x15
    35d8:	7e 89       	ldd	r23, Y+22	; 0x16
    35da:	8f 89       	ldd	r24, Y+23	; 0x17
    35dc:	98 8d       	ldd	r25, Y+24	; 0x18
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	3f ef       	ldi	r19, 0xFF	; 255
    35e2:	4f e7       	ldi	r20, 0x7F	; 127
    35e4:	57 e4       	ldi	r21, 0x47	; 71
    35e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ea:	18 16       	cp	r1, r24
    35ec:	4c f5       	brge	.+82     	; 0x3640 <main+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ee:	69 8d       	ldd	r22, Y+25	; 0x19
    35f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35f6:	20 e0       	ldi	r18, 0x00	; 0
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	40 e2       	ldi	r20, 0x20	; 32
    35fc:	51 e4       	ldi	r21, 0x41	; 65
    35fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	bc 01       	movw	r22, r24
    3608:	cd 01       	movw	r24, r26
    360a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	9c 8b       	std	Y+20, r25	; 0x14
    3614:	8b 8b       	std	Y+19, r24	; 0x13
    3616:	0f c0       	rjmp	.+30     	; 0x3636 <main+0x1c2>
    3618:	89 e1       	ldi	r24, 0x19	; 25
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	9a 8b       	std	Y+18, r25	; 0x12
    361e:	89 8b       	std	Y+17, r24	; 0x11
    3620:	89 89       	ldd	r24, Y+17	; 0x11
    3622:	9a 89       	ldd	r25, Y+18	; 0x12
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	f1 f7       	brne	.-4      	; 0x3624 <main+0x1b0>
    3628:	9a 8b       	std	Y+18, r25	; 0x12
    362a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362c:	8b 89       	ldd	r24, Y+19	; 0x13
    362e:	9c 89       	ldd	r25, Y+20	; 0x14
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	9c 8b       	std	Y+20, r25	; 0x14
    3634:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3636:	8b 89       	ldd	r24, Y+19	; 0x13
    3638:	9c 89       	ldd	r25, Y+20	; 0x14
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	69 f7       	brne	.-38     	; 0x3618 <main+0x1a4>
    363e:	14 c0       	rjmp	.+40     	; 0x3668 <main+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3640:	6d 89       	ldd	r22, Y+21	; 0x15
    3642:	7e 89       	ldd	r23, Y+22	; 0x16
    3644:	8f 89       	ldd	r24, Y+23	; 0x17
    3646:	98 8d       	ldd	r25, Y+24	; 0x18
    3648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	9c 8b       	std	Y+20, r25	; 0x14
    3652:	8b 8b       	std	Y+19, r24	; 0x13
    3654:	8b 89       	ldd	r24, Y+19	; 0x13
    3656:	9c 89       	ldd	r25, Y+20	; 0x14
    3658:	98 8b       	std	Y+16, r25	; 0x10
    365a:	8f 87       	std	Y+15, r24	; 0x0f
    365c:	8f 85       	ldd	r24, Y+15	; 0x0f
    365e:	98 89       	ldd	r25, Y+16	; 0x10
    3660:	01 97       	sbiw	r24, 0x01	; 1
    3662:	f1 f7       	brne	.-4      	; 0x3660 <main+0x1ec>
    3664:	98 8b       	std	Y+16, r25	; 0x10
    3666:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		M_TIMER0_void_setphaseCorrectPWM(80);
    3668:	80 e5       	ldi	r24, 0x50	; 80
    366a:	0e 94 cc 08 	call	0x1198	; 0x1198 <M_TIMER0_void_setphaseCorrectPWM>
    366e:	80 e0       	ldi	r24, 0x00	; 0
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	aa e7       	ldi	r26, 0x7A	; 122
    3674:	b4 e4       	ldi	r27, 0x44	; 68
    3676:	8b 87       	std	Y+11, r24	; 0x0b
    3678:	9c 87       	std	Y+12, r25	; 0x0c
    367a:	ad 87       	std	Y+13, r26	; 0x0d
    367c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    367e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3680:	7c 85       	ldd	r23, Y+12	; 0x0c
    3682:	8d 85       	ldd	r24, Y+13	; 0x0d
    3684:	9e 85       	ldd	r25, Y+14	; 0x0e
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	4a e7       	ldi	r20, 0x7A	; 122
    368c:	53 e4       	ldi	r21, 0x43	; 67
    368e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	8f 83       	std	Y+7, r24	; 0x07
    3698:	98 87       	std	Y+8, r25	; 0x08
    369a:	a9 87       	std	Y+9, r26	; 0x09
    369c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    369e:	6f 81       	ldd	r22, Y+7	; 0x07
    36a0:	78 85       	ldd	r23, Y+8	; 0x08
    36a2:	89 85       	ldd	r24, Y+9	; 0x09
    36a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	40 e8       	ldi	r20, 0x80	; 128
    36ac:	5f e3       	ldi	r21, 0x3F	; 63
    36ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36b2:	88 23       	and	r24, r24
    36b4:	2c f4       	brge	.+10     	; 0x36c0 <main+0x24c>
		__ticks = 1;
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	9e 83       	std	Y+6, r25	; 0x06
    36bc:	8d 83       	std	Y+5, r24	; 0x05
    36be:	3f c0       	rjmp	.+126    	; 0x373e <main+0x2ca>
	else if (__tmp > 65535)
    36c0:	6f 81       	ldd	r22, Y+7	; 0x07
    36c2:	78 85       	ldd	r23, Y+8	; 0x08
    36c4:	89 85       	ldd	r24, Y+9	; 0x09
    36c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	3f ef       	ldi	r19, 0xFF	; 255
    36cc:	4f e7       	ldi	r20, 0x7F	; 127
    36ce:	57 e4       	ldi	r21, 0x47	; 71
    36d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36d4:	18 16       	cp	r1, r24
    36d6:	4c f5       	brge	.+82     	; 0x372a <main+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36da:	7c 85       	ldd	r23, Y+12	; 0x0c
    36dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36de:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	40 e2       	ldi	r20, 0x20	; 32
    36e6:	51 e4       	ldi	r21, 0x41	; 65
    36e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	bc 01       	movw	r22, r24
    36f2:	cd 01       	movw	r24, r26
    36f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	9e 83       	std	Y+6, r25	; 0x06
    36fe:	8d 83       	std	Y+5, r24	; 0x05
    3700:	0f c0       	rjmp	.+30     	; 0x3720 <main+0x2ac>
    3702:	89 e1       	ldi	r24, 0x19	; 25
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	9c 83       	std	Y+4, r25	; 0x04
    3708:	8b 83       	std	Y+3, r24	; 0x03
    370a:	8b 81       	ldd	r24, Y+3	; 0x03
    370c:	9c 81       	ldd	r25, Y+4	; 0x04
    370e:	01 97       	sbiw	r24, 0x01	; 1
    3710:	f1 f7       	brne	.-4      	; 0x370e <main+0x29a>
    3712:	9c 83       	std	Y+4, r25	; 0x04
    3714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3716:	8d 81       	ldd	r24, Y+5	; 0x05
    3718:	9e 81       	ldd	r25, Y+6	; 0x06
    371a:	01 97       	sbiw	r24, 0x01	; 1
    371c:	9e 83       	std	Y+6, r25	; 0x06
    371e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3720:	8d 81       	ldd	r24, Y+5	; 0x05
    3722:	9e 81       	ldd	r25, Y+6	; 0x06
    3724:	00 97       	sbiw	r24, 0x00	; 0
    3726:	69 f7       	brne	.-38     	; 0x3702 <main+0x28e>
    3728:	14 c0       	rjmp	.+40     	; 0x3752 <main+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372a:	6f 81       	ldd	r22, Y+7	; 0x07
    372c:	78 85       	ldd	r23, Y+8	; 0x08
    372e:	89 85       	ldd	r24, Y+9	; 0x09
    3730:	9a 85       	ldd	r25, Y+10	; 0x0a
    3732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3736:	dc 01       	movw	r26, r24
    3738:	cb 01       	movw	r24, r22
    373a:	9e 83       	std	Y+6, r25	; 0x06
    373c:	8d 83       	std	Y+5, r24	; 0x05
    373e:	8d 81       	ldd	r24, Y+5	; 0x05
    3740:	9e 81       	ldd	r25, Y+6	; 0x06
    3742:	9a 83       	std	Y+2, r25	; 0x02
    3744:	89 83       	std	Y+1, r24	; 0x01
    3746:	89 81       	ldd	r24, Y+1	; 0x01
    3748:	9a 81       	ldd	r25, Y+2	; 0x02
    374a:	01 97       	sbiw	r24, 0x01	; 1
    374c:	f1 f7       	brne	.-4      	; 0x374a <main+0x2d6>
    374e:	9a 83       	std	Y+2, r25	; 0x02
    3750:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		M_TIMER0_void_setphaseCorrectPWM(100);
    3752:	84 e6       	ldi	r24, 0x64	; 100
    3754:	0e 94 cc 08 	call	0x1198	; 0x1198 <M_TIMER0_void_setphaseCorrectPWM>
    3758:	a0 ce       	rjmp	.-704    	; 0x349a <main+0x26>

0000375a <__mulsi3>:
    375a:	62 9f       	mul	r22, r18
    375c:	d0 01       	movw	r26, r0
    375e:	73 9f       	mul	r23, r19
    3760:	f0 01       	movw	r30, r0
    3762:	82 9f       	mul	r24, r18
    3764:	e0 0d       	add	r30, r0
    3766:	f1 1d       	adc	r31, r1
    3768:	64 9f       	mul	r22, r20
    376a:	e0 0d       	add	r30, r0
    376c:	f1 1d       	adc	r31, r1
    376e:	92 9f       	mul	r25, r18
    3770:	f0 0d       	add	r31, r0
    3772:	83 9f       	mul	r24, r19
    3774:	f0 0d       	add	r31, r0
    3776:	74 9f       	mul	r23, r20
    3778:	f0 0d       	add	r31, r0
    377a:	65 9f       	mul	r22, r21
    377c:	f0 0d       	add	r31, r0
    377e:	99 27       	eor	r25, r25
    3780:	72 9f       	mul	r23, r18
    3782:	b0 0d       	add	r27, r0
    3784:	e1 1d       	adc	r30, r1
    3786:	f9 1f       	adc	r31, r25
    3788:	63 9f       	mul	r22, r19
    378a:	b0 0d       	add	r27, r0
    378c:	e1 1d       	adc	r30, r1
    378e:	f9 1f       	adc	r31, r25
    3790:	bd 01       	movw	r22, r26
    3792:	cf 01       	movw	r24, r30
    3794:	11 24       	eor	r1, r1
    3796:	08 95       	ret

00003798 <__udivmodqi4>:
    3798:	99 1b       	sub	r25, r25
    379a:	79 e0       	ldi	r23, 0x09	; 9
    379c:	04 c0       	rjmp	.+8      	; 0x37a6 <__udivmodqi4_ep>

0000379e <__udivmodqi4_loop>:
    379e:	99 1f       	adc	r25, r25
    37a0:	96 17       	cp	r25, r22
    37a2:	08 f0       	brcs	.+2      	; 0x37a6 <__udivmodqi4_ep>
    37a4:	96 1b       	sub	r25, r22

000037a6 <__udivmodqi4_ep>:
    37a6:	88 1f       	adc	r24, r24
    37a8:	7a 95       	dec	r23
    37aa:	c9 f7       	brne	.-14     	; 0x379e <__udivmodqi4_loop>
    37ac:	80 95       	com	r24
    37ae:	08 95       	ret

000037b0 <__divmodhi4>:
    37b0:	97 fb       	bst	r25, 7
    37b2:	09 2e       	mov	r0, r25
    37b4:	07 26       	eor	r0, r23
    37b6:	0a d0       	rcall	.+20     	; 0x37cc <__divmodhi4_neg1>
    37b8:	77 fd       	sbrc	r23, 7
    37ba:	04 d0       	rcall	.+8      	; 0x37c4 <__divmodhi4_neg2>
    37bc:	27 d0       	rcall	.+78     	; 0x380c <__udivmodhi4>
    37be:	06 d0       	rcall	.+12     	; 0x37cc <__divmodhi4_neg1>
    37c0:	00 20       	and	r0, r0
    37c2:	1a f4       	brpl	.+6      	; 0x37ca <__divmodhi4_exit>

000037c4 <__divmodhi4_neg2>:
    37c4:	70 95       	com	r23
    37c6:	61 95       	neg	r22
    37c8:	7f 4f       	sbci	r23, 0xFF	; 255

000037ca <__divmodhi4_exit>:
    37ca:	08 95       	ret

000037cc <__divmodhi4_neg1>:
    37cc:	f6 f7       	brtc	.-4      	; 0x37ca <__divmodhi4_exit>
    37ce:	90 95       	com	r25
    37d0:	81 95       	neg	r24
    37d2:	9f 4f       	sbci	r25, 0xFF	; 255
    37d4:	08 95       	ret

000037d6 <__divmodsi4>:
    37d6:	97 fb       	bst	r25, 7
    37d8:	09 2e       	mov	r0, r25
    37da:	05 26       	eor	r0, r21
    37dc:	0e d0       	rcall	.+28     	; 0x37fa <__divmodsi4_neg1>
    37de:	57 fd       	sbrc	r21, 7
    37e0:	04 d0       	rcall	.+8      	; 0x37ea <__divmodsi4_neg2>
    37e2:	28 d0       	rcall	.+80     	; 0x3834 <__udivmodsi4>
    37e4:	0a d0       	rcall	.+20     	; 0x37fa <__divmodsi4_neg1>
    37e6:	00 1c       	adc	r0, r0
    37e8:	38 f4       	brcc	.+14     	; 0x37f8 <__divmodsi4_exit>

000037ea <__divmodsi4_neg2>:
    37ea:	50 95       	com	r21
    37ec:	40 95       	com	r20
    37ee:	30 95       	com	r19
    37f0:	21 95       	neg	r18
    37f2:	3f 4f       	sbci	r19, 0xFF	; 255
    37f4:	4f 4f       	sbci	r20, 0xFF	; 255
    37f6:	5f 4f       	sbci	r21, 0xFF	; 255

000037f8 <__divmodsi4_exit>:
    37f8:	08 95       	ret

000037fa <__divmodsi4_neg1>:
    37fa:	f6 f7       	brtc	.-4      	; 0x37f8 <__divmodsi4_exit>
    37fc:	90 95       	com	r25
    37fe:	80 95       	com	r24
    3800:	70 95       	com	r23
    3802:	61 95       	neg	r22
    3804:	7f 4f       	sbci	r23, 0xFF	; 255
    3806:	8f 4f       	sbci	r24, 0xFF	; 255
    3808:	9f 4f       	sbci	r25, 0xFF	; 255
    380a:	08 95       	ret

0000380c <__udivmodhi4>:
    380c:	aa 1b       	sub	r26, r26
    380e:	bb 1b       	sub	r27, r27
    3810:	51 e1       	ldi	r21, 0x11	; 17
    3812:	07 c0       	rjmp	.+14     	; 0x3822 <__udivmodhi4_ep>

00003814 <__udivmodhi4_loop>:
    3814:	aa 1f       	adc	r26, r26
    3816:	bb 1f       	adc	r27, r27
    3818:	a6 17       	cp	r26, r22
    381a:	b7 07       	cpc	r27, r23
    381c:	10 f0       	brcs	.+4      	; 0x3822 <__udivmodhi4_ep>
    381e:	a6 1b       	sub	r26, r22
    3820:	b7 0b       	sbc	r27, r23

00003822 <__udivmodhi4_ep>:
    3822:	88 1f       	adc	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	5a 95       	dec	r21
    3828:	a9 f7       	brne	.-22     	; 0x3814 <__udivmodhi4_loop>
    382a:	80 95       	com	r24
    382c:	90 95       	com	r25
    382e:	bc 01       	movw	r22, r24
    3830:	cd 01       	movw	r24, r26
    3832:	08 95       	ret

00003834 <__udivmodsi4>:
    3834:	a1 e2       	ldi	r26, 0x21	; 33
    3836:	1a 2e       	mov	r1, r26
    3838:	aa 1b       	sub	r26, r26
    383a:	bb 1b       	sub	r27, r27
    383c:	fd 01       	movw	r30, r26
    383e:	0d c0       	rjmp	.+26     	; 0x385a <__udivmodsi4_ep>

00003840 <__udivmodsi4_loop>:
    3840:	aa 1f       	adc	r26, r26
    3842:	bb 1f       	adc	r27, r27
    3844:	ee 1f       	adc	r30, r30
    3846:	ff 1f       	adc	r31, r31
    3848:	a2 17       	cp	r26, r18
    384a:	b3 07       	cpc	r27, r19
    384c:	e4 07       	cpc	r30, r20
    384e:	f5 07       	cpc	r31, r21
    3850:	20 f0       	brcs	.+8      	; 0x385a <__udivmodsi4_ep>
    3852:	a2 1b       	sub	r26, r18
    3854:	b3 0b       	sbc	r27, r19
    3856:	e4 0b       	sbc	r30, r20
    3858:	f5 0b       	sbc	r31, r21

0000385a <__udivmodsi4_ep>:
    385a:	66 1f       	adc	r22, r22
    385c:	77 1f       	adc	r23, r23
    385e:	88 1f       	adc	r24, r24
    3860:	99 1f       	adc	r25, r25
    3862:	1a 94       	dec	r1
    3864:	69 f7       	brne	.-38     	; 0x3840 <__udivmodsi4_loop>
    3866:	60 95       	com	r22
    3868:	70 95       	com	r23
    386a:	80 95       	com	r24
    386c:	90 95       	com	r25
    386e:	9b 01       	movw	r18, r22
    3870:	ac 01       	movw	r20, r24
    3872:	bd 01       	movw	r22, r26
    3874:	cf 01       	movw	r24, r30
    3876:	08 95       	ret

00003878 <__prologue_saves__>:
    3878:	2f 92       	push	r2
    387a:	3f 92       	push	r3
    387c:	4f 92       	push	r4
    387e:	5f 92       	push	r5
    3880:	6f 92       	push	r6
    3882:	7f 92       	push	r7
    3884:	8f 92       	push	r8
    3886:	9f 92       	push	r9
    3888:	af 92       	push	r10
    388a:	bf 92       	push	r11
    388c:	cf 92       	push	r12
    388e:	df 92       	push	r13
    3890:	ef 92       	push	r14
    3892:	ff 92       	push	r15
    3894:	0f 93       	push	r16
    3896:	1f 93       	push	r17
    3898:	cf 93       	push	r28
    389a:	df 93       	push	r29
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
    38a0:	ca 1b       	sub	r28, r26
    38a2:	db 0b       	sbc	r29, r27
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	f8 94       	cli
    38a8:	de bf       	out	0x3e, r29	; 62
    38aa:	0f be       	out	0x3f, r0	; 63
    38ac:	cd bf       	out	0x3d, r28	; 61
    38ae:	09 94       	ijmp

000038b0 <__epilogue_restores__>:
    38b0:	2a 88       	ldd	r2, Y+18	; 0x12
    38b2:	39 88       	ldd	r3, Y+17	; 0x11
    38b4:	48 88       	ldd	r4, Y+16	; 0x10
    38b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    38b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    38ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    38bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    38be:	9b 84       	ldd	r9, Y+11	; 0x0b
    38c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    38c2:	b9 84       	ldd	r11, Y+9	; 0x09
    38c4:	c8 84       	ldd	r12, Y+8	; 0x08
    38c6:	df 80       	ldd	r13, Y+7	; 0x07
    38c8:	ee 80       	ldd	r14, Y+6	; 0x06
    38ca:	fd 80       	ldd	r15, Y+5	; 0x05
    38cc:	0c 81       	ldd	r16, Y+4	; 0x04
    38ce:	1b 81       	ldd	r17, Y+3	; 0x03
    38d0:	aa 81       	ldd	r26, Y+2	; 0x02
    38d2:	b9 81       	ldd	r27, Y+1	; 0x01
    38d4:	ce 0f       	add	r28, r30
    38d6:	d1 1d       	adc	r29, r1
    38d8:	0f b6       	in	r0, 0x3f	; 63
    38da:	f8 94       	cli
    38dc:	de bf       	out	0x3e, r29	; 62
    38de:	0f be       	out	0x3f, r0	; 63
    38e0:	cd bf       	out	0x3d, r28	; 61
    38e2:	ed 01       	movw	r28, r26
    38e4:	08 95       	ret

000038e6 <_exit>:
    38e6:	f8 94       	cli

000038e8 <__stop_program>:
    38e8:	ff cf       	rjmp	.-2      	; 0x38e8 <__stop_program>
